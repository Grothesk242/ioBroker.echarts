{"version":3,"file":"socketSimulator.js","sourceRoot":"","sources":["../../src/lib/socketSimulator.ts"],"names":[],"mappings":";;AAIA,8BAmEC;AArED,IAAI,YAA8D,CAAC;AAEnE,SAAgB,SAAS,CAAC,OAAyB;IAC/C,OAAO;QACH,QAAQ,EAAE,UAAU,EAAU;YAC1B,OAAO,OAAO,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC;QAC5C,CAAC;QAED,YAAY,EAAE,UACV,EAAU,EACV,OAAmC;YAMnC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CACnC,OAAO,CAAC,UAAU,CACd,EAAE,EACF,OAAO,EACP,CAAC,GAAiB,EAAE,MAAkC,EAAE,IAAa,EAAE,SAAkB,EAAQ,EAAE,CAC/F,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAC/D,CACJ,CAAC;QACN,CAAC;QAED,SAAS,EAAE,UAAU,EAAU;YAC3B,OAAO,OAAO,CAAC,qBAAqB,CAAC,EAAE,CAAC,CAAC;QAC7C,CAAC;QAED,eAAe,EAAE;YACb,YAAY;gBACR,YAAY,YAAY,OAAO,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;YACpG,OAAO,YAAY,CAAC;QACxB,CAAC;QAED,gBAAgB,EAAE,UAAU,GAAsB,EAAE,GAAiC,IAAS,CAAC;QAC/F,cAAc,EAAE,UAAU,GAAsB,EAAE,GAAgC;YAC9E,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;QAED,iBAAiB,EAAE,UACf,GAAsB,EACtB,GAOS;YAET,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;QAED,eAAe,EAAE,UACb,GAAsB,EACtB,GAOS;YAET,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC7B,CAAC;KACJ,CAAC;AACN,CAAC","sourcesContent":["import type { Connection } from '../types';\n\nlet systemConfig: Promise<ioBroker.SystemConfigObject> | undefined;\n\nexport function getSocket(adapter: ioBroker.Adapter): Connection {\n    return {\n        getState: function (id: string): Promise<ioBroker.State | null | undefined> {\n            return adapter.getForeignStateAsync(id);\n        },\n\n        getHistoryEx: function (\n            id: string,\n            options: ioBroker.GetHistoryOptions,\n        ): Promise<{\n            values: ioBroker.GetHistoryResult;\n            sessionId: number | string;\n            step: number;\n        }> {\n            return new Promise((resolve, reject) =>\n                adapter.getHistory(\n                    id,\n                    options,\n                    (err: Error | null, values?: ioBroker.GetHistoryResult, step?: number, sessionId?: string): void =>\n                        err ? reject(err) : resolve({ values, sessionId, step }),\n                ),\n            );\n        },\n\n        getObject: function (id: string): Promise<ioBroker.Object | null | undefined> {\n            return adapter.getForeignObjectAsync(id);\n        },\n\n        getSystemConfig: function (): Promise<ioBroker.SystemConfigObject> {\n            systemConfig =\n                systemConfig instanceof Promise ? systemConfig : adapter.getForeignObjectAsync('system.config');\n            return systemConfig;\n        },\n\n        unsubscribeState: function (_id: string | string[], _cb?: ioBroker.StateChangeHandler): void {},\n        subscribeState: function (_id: string | string[], _cb: ioBroker.StateChangeHandler): Promise<void> {\n            return Promise.resolve();\n        },\n\n        unsubscribeObject: function (\n            _id: string | string[],\n            _cb?: (\n                id: string,\n                obj: ioBroker.Object | null | undefined,\n                oldObj?: {\n                    _id: string;\n                    type: string;\n                },\n            ) => void,\n        ): Promise<void> {\n            return Promise.resolve();\n        },\n\n        subscribeObject: function (\n            _id: string | string[],\n            _cb: (\n                id: string,\n                obj: ioBroker.Object | null | undefined,\n                oldObj?: {\n                    _id: string;\n                    type: string;\n                },\n            ) => void,\n        ): Promise<void> {\n            return Promise.resolve();\n        },\n    };\n}\n"]}