{"version":3,"file":"ChartModel.js","sourceRoot":"","sources":["../../src/lib/ChartModel.ts"],"names":[],"mappings":";;AA6NA;;;GAGG;AACH,SAAS,UAAU,CAAC,KAAa;IAC7B,KAAK,GAAG,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IACpD,MAAM,MAAM,GAA8C,EAAE,CAAC;IAC7D,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QAC5B,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACnB,IAAI,IAAI,EAAE,CAAC;YACP,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC9B,MAAM,IAAI,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACjD,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACnB,MAAM,CAAC,IAAI,CAAC,GAAG,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,MAAM,EAAE,CAAC;oBAC1B,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;gBACxB,CAAC;qBAAM,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,OAAO,EAAE,CAAC;oBAClC,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;gBACzB,CAAC;qBAAM,CAAC;oBACJ,MAAM,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,IAAI,CAAsB,CAAC,CAAC;oBACxD,IAAI,CAAC,CAAC,QAAQ,EAAE,KAAK,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;wBAChC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACrB,CAAC;gBACL,CAAC;YACL,CAAC;iBAAM,CAAC;gBACJ,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;YACxB,CAAC;QACL,CAAC;IACL,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;AAClB,CAAC;AAED,4EAA4E;AAC5E,SAAS,eAAe,CAAC,MAAsB;IAC3C,MAAM,SAAS,GAAgB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IAElE,IAAI,MAAM,CAAC,KAAK,EAAE,CAAC;QACf,SAAS,CAAC,CAAC,GAAG,MAAM,CAAC,KAA0B,CAAC;QAChD,wCAAwC;QACxC,OAAO,SAAS,CAAC,KAAK,CAAC;IAC3B,CAAC;IAED,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC;QACd,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QACtD,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/D,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC5D,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC5D,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAClC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC;gBACb,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;gBACV,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,SAAS;gBAC3B,SAAS,EAAE,MAAM;gBACjB,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM;gBAC1B,SAAS,EAAE,MAAM,CAAC,WAAW,IAAI,CAAC;gBAClC,UAAU,EAAE,MAAM,CAAC,WAAW,IAAI,CAAC;gBACnC,GAAG,EAAE,MAAM,CAAC,GAAG,IAAI,SAAS;gBAC5B,GAAG,EAAE,MAAM,CAAC,GAAG,IAAI,SAAS;gBAC5B,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,SAAS;aAC9B,CAAC,CAAC;QACP,CAAC;QACD,SAAS,CAAC,aAAa,GAAG,MAAM,CAAC;QACjC,SAAS,CAAC,aAAa,GAAG,GAAG,CAAC;QAC9B,SAAS,CAAC,WAAW,GAAG,KAAK,CAAC;IAClC,CAAC;IAED,uCAAuC;IACvC,IAAI,MAAM,CAAC,CAAC,EAAE,CAAC;QACX,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACvC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;gBAClB,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;gBACxC,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YAC3B,CAAC;YACD,IAAI,MAAM,CAAC,QAAQ,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;gBAC3C,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;YAC3C,CAAC;YACD,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAA4B,CAAC,IAAI,CAAC,CAAC;YAChF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAA2B,CAAC,IAAI,CAAC,CAAC;YAC9E,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAA8B,CAAC,IAAI,CAAC,CAAC;YACpF,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,IAAI,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC;QAChF,CAAC;IACL,CAAC;IAED,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC;IAE1B,gBAAgB;IAChB,IAAI,MAAM,CAAC,CAAC,EAAE,CAAC;QACX,SAAS,CAAC,KAAK,GAAG,EAAE,CAAC;QACrB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACvC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG;gBACjB,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACrB,cAAc,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7B,cAAc,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC9B,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpB,IAAI,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAW,CAAC;gBACzC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjB,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACjB,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnB,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3B,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC1B,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;gBACzB,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;aAC3B,CAAC;QACN,CAAC;QACD,wCAAwC;QACxC,OAAO,SAAS,CAAC,CAAC,CAAC;IACvB,CAAC;IAED,SAAS,CAAC,KAAK,GAAG,SAAS,CAAC,KAAK,IAAI,EAAE,CAAC;IAExC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;QACtB,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;IACxC,CAAC;IAED,qBAAqB;IACrB,SAAS,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC;IACzC,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC;IAC3C,2DAA2D;IAC3D,IAAI,UAAU,CAAC,SAAS,CAAC,KAAe,CAAC,CAAC,QAAQ,EAAE,KAAK,SAAS,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;QACzF,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC;IAC5B,CAAC;IACD,IAAI,UAAU,CAAC,SAAS,CAAC,MAAgB,CAAC,CAAC,QAAQ,EAAE,KAAK,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;QAC3F,SAAS,CAAC,MAAM,IAAI,IAAI,CAAC;IAC7B,CAAC;IAED,SAAS,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,EAAE,CAAC;IAC/C,SAAS,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,KAAK,MAAM,IAAI,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAC;IAC5E,SAAS,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,KAAK,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC;IAChE,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,KAAK,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC;IACtE,SAAS,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,KAAK,MAAM,IAAI,MAAM,CAAC,UAAU,KAAK,IAAI,CAAC;IAClF,SAAS,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,KAAK,MAAM,IAAI,MAAM,CAAC,UAAU,KAAK,IAAI,CAAC;IAClF,SAAS,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,KAAK,MAAM,IAAI,MAAM,CAAC,WAAW,KAAK,IAAI,CAAC;IACrF,SAAS,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,KAAK,MAAM,IAAI,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAC;IAC5E,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,KAAK,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC;IACtE,SAAS,CAAC,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,SAAmB,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;IACpE,SAAS,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,UAAoB,EAAE,EAAE,CAAC,CAAC;IACvG,SAAS,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,IAAI,UAAU,CAAC;IACnD,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC;QACrB,IAAI,OAAO,MAAM,CAAC,WAAW,KAAK,QAAQ,IAAI,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;YAC7E,SAAS,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;YAC1G,SAAS,CAAC,gBAAgB,GAAG,IAAI,CAAC;QACtC,CAAC;aAAM,IAAI,OAAO,MAAM,CAAC,WAAW,KAAK,QAAQ,IAAI,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;YACpF,SAAS,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;YAC1G,SAAS,CAAC,eAAe,GAAG,IAAI,CAAC;QACrC,CAAC;aAAM,CAAC;YACJ,SAAS,CAAC,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,WAAqB,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;QAC5E,CAAC;IACL,CAAC;IAED,OAAO,SAAS,CAAC;AACrB,CAAC;AAED,MAAM,aAAa,GAAG,mBAAmB,CAAC;AAE1C,MAAM,UAAU;IACK,MAAM,CAAa;IACnB,aAAa,CAAS;IACtB,UAAU,CAAU;IACrC,kBAAkB;IACV,UAAU,GAAiB,EAAE,CAAC;IACtC,0BAA0B;IAClB,OAAO,GAAgB,EAAE,CAAC;IAClC,sEAAsE;IACrD,YAAY,GAAyC,EAAE,CAAC;IACjE,KAAK,GAAsB,IAAI,CAAC;IAChC,OAAO,GAAY,KAAK,CAAC;IACzB,UAAU,GAAa,EAAE,CAAC;IAC1B,SAAS,GAAW,CAAC,CAAC;IAC9B,0BAA0B;IAClB,cAAc,GAA0C,IAAI,CAAC;IAC7D,mBAAmB,GAAyC,IAAI,CAAC;IACjE,iBAAiB,GAAyC,IAAI,CAAC;IAC/D,UAAU,GAAY,KAAK,CAAC;IACpC,kCAAkC;IAC1B,gBAAgB,GAAW,EAAE,CAAC;IAC9B,cAAc,GAAW,EAAE,CAAC;IAC5B,YAAY,GAMP,IAAI,CAAC;IACV,aAAa,GAA0C,IAAI,CAAC;IAC5D,WAAW,GAAoC,IAAI,CAAC;IACpD,cAAc,GAAqE,EAAE,CAAC;IACtF,KAAK,GAAG,KAAK,CAAC;IACd,QAAQ,GAAgE,IAAI,CAAC;IAC7E,QAAQ,CAAS;IACjB,eAAe,GAAY,KAAK,CAAC;IACjC,YAAY,GAAuC,IAAI,CAAC;IACxD,MAAM,CAAU;IAChB,MAAM,CAAe;IACrB,aAAa,CAAY;IACzB,GAAG,GAAW,IAAI,CAAC,GAAG,EAAE,CAAC;IACzB,IAAI,CAGV;IAEM,gBAAgB,GAA4C,EAAE,CAAC;IAEvE,YACI,MAAkB;IAClB,0BAA0B;IAC1B,MAA+B,EAC/B,OAA6E;QAE7E,OAAO,GAAG,EAAE,aAAa,EAAE,GAAG,EAAE,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,EAAE,CAAC;QACrD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QAErB,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,IAAI,GAAG,CAAC,CAAC,2DAA2D;QAC9G,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,KAAK,CAAC,CAAC,6BAA6B;QAE5E,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YACnB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;YAErC,IAAI,CAAC,MAAM,EAAE,CAAC;gBACV,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;gBAC5B,MAAM,CAAC,gBAAgB,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YACpE,CAAC;QACL,CAAC,CAAC,eAAe;QAEjB,KAAK,IAAI,CAAC,MAAM;aACX,eAAe,EAAE;aACjB,KAAK,CAAC,CAAC,CAAU,EAAQ,EAAE;YACxB,IAAK,CAAW,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;gBACtE,IAAI,CAAC,WAAW,CAAC,CAAU,CAAC,CAAC;YACjC,CAAC;YACD,OAAO,CAAC,KAAK,CAAC,6BAA8B,CAAW,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YACtE,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC;aACD,IAAI,CAAC,CAAC,YAAyC,EAAiB,EAAE;YAC/D,IAAI,CAAC,YAAY,GAAG,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAE,EAAkC,CAAC;YACrG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC;YACvD,OAAO,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACX,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,MAAgC;QACvD,IAAI,MAAM,EAAE,CAAC;YACT,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;gBAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACzB,CAAC;iBAAM,CAAC;gBACJ,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;YAC1C,CAAC;QACL,CAAC;aAAM,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YAC1B,MAAM,KAAK,GAA8C,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,mBAAmB;YAEhH,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,CAAC,KAAK,KAAK,MAAM,IAAI,KAAK,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,CAAC,KAAK,KAAK,GAAG,CAAC;YAExG,IAAI,KAAK,CAAC,MAAM,IAAI,OAAO,KAAK,CAAC,MAAM,KAAK,QAAQ,EAAE,CAAC;gBACnD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;YAC/B,CAAC;iBAAM,CAAC;gBACJ,MAAM,MAAM,GAA8C,UAAU,CAChE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAC5D,CAAC,CAAC,mBAAmB;gBACtB,IAAI,MAAM,GAAmB,EAAoB,CAAC;gBAElD,IAAI,MAAM,CAAC,IAAI,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;oBACjD,IAAI,CAAC;wBACD,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBACrC,CAAC;oBAAC,MAAM,CAAC;wBACL,SAAS;oBACb,CAAC;gBACL,CAAC;gBACD,IAAI,KAAK,CAAC,IAAI,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,QAAQ,EAAE,CAAC;oBAC/C,IAAI,CAAC;wBACD,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;oBACxD,CAAC;oBAAC,MAAM,CAAC;wBACL,SAAS;oBACb,CAAC;gBACL,CAAC;gBACD,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;oBAChB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAgB,CAAC;oBACtC,IAAI,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,WAAW,EAAE,CAAC;wBACrC,IAAI,CAAC,IAAI,GAAG;4BACR,KAAK,EAAE,MAAM,CAAC,KAA0B;4BACxC,WAAW,EAAE,MAAM,CAAC,WAA+B;yBACtD,CAAC;oBACN,CAAC;gBACL,CAAC;qBAAM,CAAC;oBACJ,sBAAsB;oBACtB,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;wBAChC,MAAM,CAAC,QAAQ;4BACX,MAAM,CAAC,QAAQ,KAAK,IAAI;gCACxB,MAAM,CAAC,QAAQ,KAAK,MAAM;gCAC1B,MAAM,CAAC,QAAQ,KAAK,CAAC;gCACrB,MAAM,CAAC,QAAQ,KAAK,GAAG,CAAC;oBAChC,CAAC;oBACD,IAAI,KAAK,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;wBAC/B,MAAM,CAAC,QAAQ;4BACX,KAAK,CAAC,QAAQ,KAAK,IAAI;gCACvB,KAAK,CAAC,QAAQ,KAAK,MAAM;gCACzB,KAAK,CAAC,QAAQ,KAAK,CAAC;gCACpB,KAAK,CAAC,QAAQ,KAAK,GAAG,CAAC;oBAC/B,CAAC;oBACD,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;oBACtC,4BAA4B;gBAChC,CAAC;YACL,CAAC;QACL,CAAC;QAED,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAE1B,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACnC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC/B,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,IACI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBACzE,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAC5B,CAAC;gBACC,IAAI,CAAC,MAAM,GAAG,aAAa,IAAI,CAAC,MAAM,EAAE,CAAC;YAC7C,CAAC;YAED,IAAI,CAAC;gBACD,MAAM,GAAG,GAA4C,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAG/E,CAAC;gBAChB,IAAI,CAAC,GAAG,EAAE,MAAM,EAAE,IAAI,IAAI,GAAG,CAAC,IAAI,KAAK,OAAO,EAAE,CAAC;oBAC7C,OAAO,CAAC,KAAK,CAAC,+BAA+B,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;oBACpF,OAAO;gBACX,CAAC;gBACD,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC/C,IAAI,CAAC,MAAM,CAAC,QAAQ;oBAChB,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;gBAC/F,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;gBAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAyB,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;gBAC5E,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;gBAC/B,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC;gBAEnC,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC;oBACnB,IACI,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,QAAQ;wBACnC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC;wBAC9B,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,EAChC,CAAC;wBACC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;oBACtD,CAAC;yBAAM,CAAC;wBACJ,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;oBACxC,CAAC;gBACL,CAAC;gBACD,IAAI,IAAI,CAAC,IAAI,EAAE,WAAW,EAAE,CAAC;oBACzB,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;gBACpD,CAAC;gBAED,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAEtB,8BAA8B;gBAC9B,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,gBAAgB,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC;oBAC5D,IAAI,CAAC,gBAAgB;wBACjB,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;oBACtF,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC;oBACpC,MAAM,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;gBACxE,CAAC;gBACD,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC;oBACnE,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;gBACtF,CAAC;YACL,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACT,CAAC,KAAK,aAAa,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAC/D,OAAO,CAAC,KAAK,CAAC,gBAAgB,IAAI,CAAC,MAAM,MAAM,CAAC,EAAE,CAAC,CAAC;YACxD,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,MAAM,CAAC,QAAQ;gBAChB,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,SAAS;oBAC9B,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,YAAY,KAAK,IAAI;oBACzC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAC;YACxC,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;YAC9C,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAyB,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;YAC5E,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YAC/B,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,CAAC;gBACnE,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;YACtF,CAAC;QACL,CAAC;IACL,CAAC;IAED,YAAY,GAAG,GAAS,EAAE;QACtB,IAAI,IAAI,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACzC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC;YACrC,KAAK,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACrC,CAAC;IACL,CAAC,CAAC;IAEF,cAAc,GAAG,CAAC,EAAU,EAAE,GAAuC,EAAQ,EAAE;QAC3E,IAAI,EAAE,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC;YACrB,OAAO;QACX,CAAC;QACD,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC3B,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC3C,CAAC;QACD,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC,GAAG,EAAE;YACvC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;YAChC,IAAI,SAAS,CAAC;YACd,IAAI,GAAG,EAAE,CAAC;gBACN,SAAS,GAAG,eAAe,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACjD,CAAC;iBAAM,CAAC;gBACJ,SAAS,GAAG,eAAe,CAAC,EAAoB,CAAC,CAAC;YACtD,CAAC;YACD,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;gBAC5D,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;gBACxB,IAAI,CAAC,cAAc,IAAI,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAC1D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;gBAE3B,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;oBAClE,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;gBACtF,CAAC;gBAED,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;YACzB,CAAC;QACL,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC,CAAC;IAEF,WAAW,CAAC,OAA8D;QACtE,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,kBAAkB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACtG,CAAC;QAED,IAAI,CAAC,OAAO,EAAE,CAAC;YACX,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAChB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,iBAAiB,IAAI,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBAC/D,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC,GAAG,EAAE;oBACrC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;oBAC9B,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;wBAClE,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;wBAC9B,IAAI,CAAC,cAAc,IAAI,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;wBAC1D,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;oBACtF,CAAC;oBACD,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACzB,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAC3B,CAAC;QACL,CAAC;aAAM,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;YAC1B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC;YACpC,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;YAC9B,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;gBACtB,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;gBAC9B,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBACnC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC/B,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,yBAAyB;YACzB,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC;YACzC,IAAI,QAAQ,EAAE,CAAC;gBACX,OAAO,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAClC,CAAC;YACD,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC;gBAC9E,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;gBACxB,IAAI,QAAQ,EAAE,CAAC;oBACX,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;gBAClC,CAAC;gBACD,IAAI,CAAC,iBAAiB,IAAI,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBAC/D,IAAI,CAAC,iBAAiB,GAAG,UAAU,CAAC,GAAG,EAAE;oBACrC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;oBAC9B,KAAK,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACzB,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAC3B,CAAC;iBAAM,IAAI,QAAQ,EAAE,CAAC;gBAClB,IAAI,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC;YAClC,CAAC;QACL,CAAC;IACL,CAAC;IAED,OAAO;QACH,IAAI,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;gBACnB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;YACxF,CAAC;YACD,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;YACrB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QAC5B,CAAC;QACD,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACrC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAClC,CAAC;QACD,IAAI,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC3B,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;YACvC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;QACpC,CAAC;QACD,IAAI,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;gBACnB,KAAK,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;YACnF,CAAC;YACD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QACjC,CAAC;QACD,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,aAAa,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACnC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC/B,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YACnB,IAAI,IAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,MAAM,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;gBACnE,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;YACjC,CAAC;QACL,CAAC;IACL,CAAC;IAED,QAAQ,CACJ,EAMU;QAEV,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAC3B,CAAC;IAED,SAAS,CAAC,EAAyC;QAC/C,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;IAC5B,CAAC;IAED,OAAO,CAAC,EAAiC;QACrC,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IAC1B,CAAC;IAED,SAAS;QACL,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAED,eAAe;QACX,OAAO,IAAI,CAAC,YAAY,CAAC;IAC7B,CAAC;IAED,SAAS,CAAC,MAAoC;QAC1C,KAAK,IAAI,CAAC,oBAAoB,CAAC,MAAwB,CAAC,CAAC;IAC7D,CAAC;IAED,oBAAoB,CAAC,KAAoB,EAAE,GAAkB,EAAE,MAAkC;QAC7F,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,YAAiC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;QAC5F,IAAI,KAAK,GAAG,OAAO,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QAC1D,IAAI,OAAO,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;QAElE,+BAA+B;QAC/B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;YAC5B,IAAI,KAAK,GAAG,OAAO,IAAI,OAAO,GAAG,EAAE,EAAE,CAAC;gBAClC,mCAAmC;gBACnC,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,EAAE,CAAC;YAClC,CAAC;iBAAM,IAAI,KAAK,GAAG,OAAO,IAAI,OAAO,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;gBAC9C,+BAA+B;gBAC/B,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,KAAK,CAAC;YACrC,CAAC;iBAAM,IAAI,KAAK,GAAG,OAAO,GAAG,OAAO,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;gBAC5C,4BAA4B;gBAC5B,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC;YACpC,CAAC;iBAAM,CAAC;gBACJ,4EAA4E;gBAC5E,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,EAAE,CAAC;YAClC,CAAC;QACL,CAAC;QAED,MAAM,GAAG,MAAM,IAAK,EAAiC,CAAC;QAEtD,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,KAAK,EAAE,EAAE,CAAC;YAClC,qCAAqC;YACrC,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;YACpC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;YACnE,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,MAAM,EAAE,CAAC;gBACxC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC;YACtD,CAAC;YACD,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACxB,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC7B,OAAO,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC;YAE9B,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;YAChC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;YAC9D,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC3B,KAAK,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,MAAM,CAAC,CAAC;QAC1D,CAAC;aAAM,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,KAAK,EAAE,EAAE,CAAC;YACzC,iCAAiC;YACjC,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;YACpC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACxB,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACxB,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,MAAM,EAAE,CAAC;gBACxC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC;YACtD,CAAC;YACD,OAAO,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC;YAE9B,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;YAChC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YACvB,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC3B,KAAK,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;QAC3D,CAAC;aAAM,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,KAAK,IAAI,EAAE,CAAC;YAC3C,gCAAgC;YAChC,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;YACpC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACtB,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACxB,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACxB,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,MAAM,EAAE,CAAC;gBACxC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YAC/C,CAAC;YACD,OAAO,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC;YAE9B,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;YAChC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;YACvC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACpB,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC3B,KAAK,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,QAAQ,CAAC,CAAC;QAC5D,CAAC;aAAM,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,KAAK,KAAK,EAAE,CAAC;YAC5C,kCAAkC;YAClC,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;YACpC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACrB,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACtB,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACxB,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACxB,SAAS,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,IAAI,CAAC,MAAM,CAAC,cAAc,KAAK,MAAM,EAAE,CAAC;gBACxC,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC;YAChD,CAAC;YACD,OAAO,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC;YAE9B,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;YAChC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACnB,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;YACpB,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;YACzC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;YAC3B,KAAK,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;YAC1B,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,sEAAsE;QAC1I,CAAC;QAED,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC;QACvB,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC;IACvB,CAAC;IAED,YAAY,CAAC,KAAa,EAAE,IAAa;QACrC,IAAI,MAAkC,CAAC;QACvC,IAAI,KAAa,CAAC;QAClB,IAAI,OAAe,CAAC;QACpB,IAAI,MAAc,CAAC;QACnB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC;QAE/D,qBAAqB;QACrB,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,KAAK,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YACvG,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAe,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;YAClE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5C,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;oBAC1B,uCAAuC;oBACvC,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;oBAC/D,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC;oBACpC,UAAU,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,EAAE,GAAG,UAAU,CAAC,CAAC;oBACxD,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;oBACxE,MAAM;gBACV,CAAC;YACL,CAAC;QACL,CAAC;aAAM,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,KAAK,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;YAC9G,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAe,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;YACjE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5C,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;oBAC1B,uCAAuC;oBACvC,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;oBAC/D,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC;oBACnC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,WAAW,EAAE,GAAG,SAAS,CAAC,CAAC;oBAC3D,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;oBACvE,MAAM;gBACV,CAAC;YACL,CAAC;QACL,CAAC;QAED,yBAAyB;QAEzB,IAAI,CAAC,IAAI,EAAE,CAAC;YACR,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAChB,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;gBAC9B,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;YAC9B,CAAC;iBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,QAAQ,EAAE,CAAC;gBAC3C,IAAI,SAA2B,CAAC;gBAChC,IAAI,OAAyB,CAAC;gBAC9B,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,KAAK,SAAS,EAAE,CAAC;oBACvC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAqB,CAAC;gBAClF,CAAC;qBAAM,CAAC;oBACJ,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACvB,CAAC;gBAED,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,SAAS,EAAE,CAAC;oBACrC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAqB,CAAC;gBAC9E,CAAC;qBAAM,CAAC;oBACJ,OAAO,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;gBACtB,CAAC;gBAED,uBAAuB;gBACvB,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnF,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;gBAE3E,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC;gBACrE,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC;YACrE,CAAC;iBAAM,CAAC;gBACJ,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,IAAI,KAAK,CAAC;gBAC3D,IAAI,QAAc,CAAC;gBAEnB,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,KAAK,KAAK,EAAE,CAAC;oBACpC,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBAClC,CAAC;qBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;oBACpD,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;oBAC3D,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC9B,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,EAAE,GAAG,OAAO,CAAC,GAAG,OAAO,GAAG,OAAO,CAAC,CAAC;oBACrF,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBAChC,CAAC;qBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;oBAClD,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;oBACzD,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC9B,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC;oBAC3E,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBAChC,CAAC;qBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,KAAK,OAAO,EAAE,CAAC;oBAC7C,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC9B,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;oBACzC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACrB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBAChC,CAAC;qBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,KAAK,SAAS,EAAE,CAAC;oBAC/C,sDAAsD;oBACtD,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC9B,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;oBAC7D,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACrB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBAChC,CAAC;qBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,KAAK,YAAY,EAAE,CAAC;oBAClD,uDAAuD;oBACvD,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC9B,KAAK;oBACL,IAAI,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE,CAAC;wBAC1B,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;oBAC7C,CAAC;yBAAM,CAAC;wBACJ,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;oBACjE,CAAC;oBACD,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACrB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBAChC,CAAC;qBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,KAAK,UAAU,EAAE,CAAC;oBAChD,sDAAsD;oBACtD,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC9B,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;oBAC7D,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;oBACzC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACrB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBAChC,CAAC;qBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,KAAK,aAAa,EAAE,CAAC;oBACnD,uDAAuD;oBACvD,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC9B,KAAK;oBACL,IAAI,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE,CAAC;wBAC1B,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;oBAC7C,CAAC;yBAAM,CAAC;wBACJ,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;oBACjE,CAAC;oBACD,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;oBACzC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACrB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBAChC,CAAC;qBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,KAAK,OAAO,EAAE,CAAC;oBAC7C,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC9B,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;oBAC3C,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBACpB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACrB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBAChC,CAAC;qBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,KAAK,MAAM,EAAE,CAAC;oBAC5C,QAAQ,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC9B,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC,CAAC;oBACjD,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACrB,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBACpB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACrB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;oBACvB,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;gBAChC,CAAC;gBAED,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC;gBAE5C,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC;gBAClE,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACjE,CAAC;YAED,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;YAC1E,IAAI,SAAS,KAAK,SAAS,EAAE,CAAC;gBAC1B,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;YACrE,CAAC;YAED,MAAM,GAAG;gBACL,KAAK,EAAE,OAAO;gBACd,GAAG,EAAE,KAAK;gBACV,UAAU,EACN,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,KAAK,SAAS;oBACzC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU;oBACxB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU;gBACzC,SAAS,EAAE,SAAS,IAAI,QAAQ;gBAChC,IAAI,EAAE,KAAK;gBACX,GAAG,EAAE,KAAK;gBACV,CAAC,EAAE,KAAK;gBACR,KAAK,EAAE,KAAK;aACe,CAAC;YAEhC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,SAAS,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,SAAS,KAAK,OAAO,EAAE,CAAC;gBACzF,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YACtD,CAAC;iBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,KAAK,MAAM,EAAE,CAAC;gBAC9C,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,IAAI,CAAC;YACnD,CAAC;iBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,KAAK,OAAO,EAAE,CAAC;gBAC/C,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,aAAa,IAAI,GAAG,CAAC;YACpD,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC;YAC5B,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC;YAExB,OAAO,MAAM,CAAC;QAClB,CAAC;QACD,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;YAC9B,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC;QAC9B,CAAC;aAAM,CAAC;YACJ,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC;YAClE,OAAO,GAAG,KAAK,GAAG,IAAI,CAAC;QAC3B,CAAC;QAED,MAAM,GAAG;YACL,KAAK,EAAE,OAAO;YACd,GAAG,EAAE,KAAK;YACV,UAAU,EACN,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU,KAAK,SAAS;gBACzC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU;gBACxB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,UAAU;YACzC,SAAS,EACJ,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,SAAqD;gBAC1E,IAAI,CAAC,MAAM,CAAC,SAAqD;gBAClE,QAAQ;YACZ,KAAK,EAAE,CAAC;YACR,IAAI,EAAE,KAAK;YACX,GAAG,EAAE,KAAK;YACV,CAAC,EAAE,KAAK;YACR,KAAK,EAAE,KAAK;SACf,CAAC;QAEF,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QACvE,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC;QAExB,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,MAAM,CAAC,cAAc,CACjB,MAAmB,EACnB,UAAoB,EACpB,SAA6B,EAC7B,oBAAkC;QAElC,MAAM,SAAS,GAAc,EAAE,CAAC;QAEhC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACrC,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;gBACnB,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;YACxB,CAAC;iBAAM,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC/B,iBAAiB;gBACjB,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC/B,CAAC;iBAAM,IAAI,SAAS,KAAK,SAAS,EAAE,CAAC;gBACjC,MAAM,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;gBAChD,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,QAAQ,CAAC,MAAM,CAAC;YACzC,CAAC;iBAAM,IAAI,SAAS,KAAK,KAAK,EAAE,CAAC;gBAC7B,IAAI,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACvC,IAAI,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC;wBACpB,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACtB,CAAC;gBACL,CAAC;gBACD,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;YACvB,CAAC;iBAAM,IAAI,SAAS,KAAK,KAAK,EAAE,CAAC;gBAC7B,IAAI,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACtB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBACvC,IAAI,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC;wBACpB,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACtB,CAAC;gBACL,CAAC;gBACD,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;YACvB,CAAC;iBAAM,IAAI,SAAS,KAAK,OAAO,EAAE,CAAC;gBAC/B,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;YACvD,CAAC;iBAAM,CAAC;gBACJ,SAAS,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACjD,CAAC;QACL,CAAC;QAED,IAAI,oBAAoB,KAAK,MAAM,EAAE,CAAC;YAClC,KAAK,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBACzC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;oBACrD,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACrC,CAAC;qBAAM,CAAC;oBACJ,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;gBACrB,CAAC;YACL,CAAC;YACD,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACvB,UAAU,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC5B,CAAC;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACrC,OAAO,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QACrD,CAAC;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,MAAM,CAAC,eAAe,CAClB,KAAsC,EACtC,WAAkD,EAClD,OAAe;QAEf,oCAAoC;QACpC,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,IAAI,EAAE,CAAC;YACrC,KAAK,GAAG,CAAC,CAAC;QACd,CAAC;aAAM,IAAI,KAAK,KAAK,OAAO,IAAI,KAAK,KAAK,KAAK,EAAE,CAAC;YAC9C,KAAK,GAAG,CAAC,CAAC;QACd,CAAC;aAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE,CAAC;YACnC,KAAK,GAAG,UAAU,CAAC,KAA0B,CAAC,CAAC;QACnD,CAAC;QAED,IAAI,WAAW,EAAE,CAAC;YACd,OAAO,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAChE,CAAC;QAED,OAAO,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;IACnD,CAAC;IAED,cAAc,CACV,GAAW,EACX,IAAqB,EACrB,MAAoB,EACpB,MAAmC;QAEnC,IAAI,CAAC,MAAM,EAAE,CAAC;YACV,MAAM,GAAG;gBACL,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;gBACnB,GAAG,EAAE,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE;aACpC,CAAC;YAEF,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,IAAI,IAAI,CAAC,SAAS,KAAK,OAAO,EAAE,CAAC;gBACzD,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YAChE,CAAC;QACL,CAAC;QAED,MAAM,OAAO,GAAW,IAAI,CAAC,OAAO,IAAI,CAAC,CAAC;QAE1C,MAAM,UAAU,GAAe,EAAE,CAAC;QAClC,qFAAqF;QACrF,MAAM,UAAU,GAAe,EAAE,CAAC;QAClC,IAAI,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QAEvC,2BAA2B;QAC3B,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,EAAE,CAAC;YAC3B,IAAI,CAAC,aAAa,EAAE,CAAC;gBACjB,aAAa,GAAG,EAAE,CAAC;gBACnB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;gBACnC,MAAM,KAAK,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBACrC,MAAM,GAAG,GAAW,OAAO,MAAM,CAAC,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAE,MAAM,CAAC,GAAY,CAAC,OAAO,EAAE,CAAC;gBACjG,OAAO,KAAK,CAAC,OAAO,EAAE,IAAI,GAAG,EAAE,CAAC;oBAC5B,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;oBACpC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;gBACpE,CAAC;YACL,CAAC;YAED,aAAa,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,WAAkD,CAAC;QACvD,IAAI,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC;YACvB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC;gBAC9C,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBAClC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;oBAC9B,OAAO,GAAG,UAAU,OAAO,EAAE,CAAC;gBAClC,CAAC;gBACD,IAAI,CAAC;oBACD,WAAW,GAAG,IAAI,QAAQ,CAAC,KAAK,EAAE,OAAO,CAA4B,CAAC;gBAC1E,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACT,OAAO,CAAC,KAAK,CAAC,+CAA+C,CAAC,EAAE,CAAC,CAAC;gBACtE,CAAC;YACL,CAAC;YACD,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;QAC7D,CAAC;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACrC,MAAM,KAAK,GAAkB,UAAU,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;YAE7F,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,EAAE,CAAC;gBAC3B,gBAAgB;gBAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;oBAC5C,IACI,aAAa,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;wBAChC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,aAAa,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,KAAK,EACpE,CAAC;wBACC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;wBAC1B,MAAM;oBACV,CAAC;gBACL,CAAC;YACL,CAAC;iBAAM,IAAI,IAAI,CAAC,SAAS,KAAK,OAAO,EAAE,CAAC;gBACpC,IAAI,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;oBAC3C,0BAA0B;oBAC1B,MAAM;gBACV,CAAC;gBAED,MAAM,EAAE,GAAoB,EAAE,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC;gBAE7D,uCAAuC;gBACvC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;oBACd,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC;gBACrB,CAAC;gBACD,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACxB,CAAC;QACL,CAAC;QAED,oBAAoB;QACpB,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,IAAI,IAAI,CAAC,SAAS,KAAK,OAAO,EAAE,CAAC;YACzD,IAAI,GAAG,GAAW,OAAO,MAAM,CAAC,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAE,MAAM,CAAC,GAAY,CAAC,OAAO,EAAE,CAAC;YAC/F,MAAM,KAAK,GAAW,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAE,MAAM,CAAC,KAAc,CAAC,OAAO,EAAE,CAAC;YACzG,8BAA8B;YAC9B,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBACjB,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;YACnB,CAAC;YACD,IAAI,UAAU,CAAC,MAAM,EAAE,CAAC;gBACpB,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC;oBACjC,UAAU,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;gBAC/D,CAAC;gBACD,MAAM,IAAI,GAAG,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBAC/C,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE,CAAC;oBACtB,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;wBACjB,6EAA6E;wBAC7E,IAAI,GAAG,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;4BAC/C,UAAU,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;wBACnE,CAAC;6BAAM,CAAC;4BACJ,UAAU,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;wBAC1D,CAAC;oBACL,CAAC;yBAAM,CAAC;wBACJ,UAAU,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;oBAC1D,CAAC;gBACL,CAAC;YACL,CAAC;iBAAM,CAAC;gBACJ,UAAU,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;gBACxD,UAAU,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;YAC1D,CAAC;YAED,6BAA6B;YAC7B,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAE5F,oEAAoE;YACpE,OAAO,EAAE,UAAU,EAAE,CAAC;QAC1B,CAAC;QAED,uCAAuC;QACvC,MAAM,OAAO,GAAG,UAAU,CAAC,cAAc,CAAC,UAAU,EAAE,aAAa,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;QAC1G,OAAO,EAAE,OAAO,EAAE,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,EAAU,EAAE,QAAgB,EAAE,KAAa;QAC1D,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACxC,IAAI,QAAQ,KAAK,MAAM,EAAE,CAAC;YACtB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC7C,IAAI,CAAC;gBACD,MAAM,SAAS,GAA6C,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,GAAa,CAAC,CAAC;gBAC7F,IAAI,MAAoB,CAAC;gBACzB,IAAK,SAAuC,CAAC,OAAO,EAAE,CAAC;oBACnD,MAAM,GAAI,SAAuC,CAAC,OAAO,CAAC;gBAC9D,CAAC;qBAAM,CAAC;oBACJ,MAAM,GAAG,SAAyB,CAAC;gBACvC,CAAC;gBACD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;oBACzB,MAAM,GAAG,EAAE,CAAC;oBACZ,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;gBACzC,CAAC;gBAED,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBAE/B,2GAA2G;gBAC3G,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;oBACZ,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;wBAChD,qEAAqE;wBACrE,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;4BAC3C,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAe,CAAC,CAAC;wBACpE,CAAC;6BAAM,CAAC;4BACJ,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gCACrB,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACvC,CAAC;iCAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;gCAChC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BAC3C,CAAC;iCAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gCAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;4BAC1C,CAAC;iCAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gCAC5B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACvC,CAAC;4BAED,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gCACrB,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACtC,CAAC;iCAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gCAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;4BACzC,CAAC;iCAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gCAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;4BACzC,CAAC;wBACL,CAAC;oBACL,CAAC;oBAED,uBAAuB;oBACvB,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;wBACf,IAAI,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;4BACpE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAuB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC1E,CAAC;6BAAM,IACH,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,QAAQ;4BAChC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,KAAK,cAAc,EACtD,CAAC;4BACC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;wBAC3D,CAAC;wBACD,UAAU;wBACV,IAAI,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,YAAY,EAAE,CAAC;4BAClE,gDAAgD;4BAChD,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC;wBACxC,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEhE,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC;gBAC3D,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;oBACjB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC;gBACzC,CAAC;qBAAM,CAAC;oBACJ,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC;gBAC/C,CAAC;YACL,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACT,OAAO,CAAC,KAAK,CAAC,6CAA6C,CAAC,EAAE,CAAC,CAAC;YACpE,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;gBACpD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBACvB,KAAK,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;YAC5D,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACxC,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC3B,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YAElC,uCAAuC;YACvC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAC1G,CAAC;YAED,IAAI,UAAU,CAAC,SAAS,KAAK,SAAS,EAAE,CAAC;gBACrC,IAAI,CAAC;oBACD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;oBACvD,IAAI,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC,SAAS,IAAI,GAAG,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS,EAAE,CAAC;wBACtE,OAAO,CAAC,IAAI,CACR,8CAA8C,GAAG,CAAC,SAAS,eAAe,IAAI,CAAC,SAAS,EAAE,CAC7F,CAAC;wBACF,OAAO;oBACX,CAAC;oBAED,IAAI,GAAG,EAAE,MAAM,EAAE,CAAC;wBACd,kNAAkN;wBAClN,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,UAAU,EAAE,GAAG,CAAC,MAAsB,EAAE,MAAM,CAAC,CAAC;wBAEvF,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;4BACjB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC;wBACzC,CAAC;6BAAM,CAAC;4BACJ,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC;wBAC/C,CAAC;wBACD,cAAc;wBACd,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC;oBACtB,CAAC;gBACL,CAAC;gBAAC,OAAO,GAAG,EAAE,CAAC;oBACX,IAAI,GAAG,KAAK,aAAa,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;wBAC5C,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;oBAC1B,CAAC;oBACD,OAAO,CAAC,KAAK,CAAC,gBAAgB,GAAG,EAAE,CAAC,CAAC;gBACzC,CAAC;YACL,CAAC;YAED,IACI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,IAAI,UAAU,CAAC,SAAS,KAAK,KAAK,IAAI,UAAU,CAAC,SAAS,KAAK,OAAO,CAAC;gBAC7F,UAAU,CAAC,SAAS,KAAK,SAAS,EACpC,CAAC;gBACC,qBAAqB;gBACrB,IAAI,CAAC;oBACD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBAC7C,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,eAAe,CACjD,KAAK,CAAC,GAAG,EACT,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,OAAO,CAAC,EACzC,UAAU,CAAC,OAAO,IAAI,CAAC,CAC1B,CAAC;gBACN,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACT,OAAO,CAAC,IAAI,CAAC,8BAA8B,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;oBACxD,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;gBACpC,CAAC;gBAED,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;oBACpD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBACzB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBACvB,KAAK,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC5D,CAAC;YACL,CAAC;QACL,CAAC;IACL,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,EAAU,EAAE,QAAgB,EAAE,KAAa,EAAE,GAAW;QAC1E,IAAI,QAAQ,KAAK,MAAM,EAAE,CAAC;YACtB,MAAM,KAAK,GAAsC,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAChF,IAAI,CAAC;gBACD,MAAM,UAAU,GAA6C,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,GAAa,CAAC,CAAC;gBAC9F,IAAI,MAAoB,CAAC;gBACzB,IAAK,UAAwC,CAAC,OAAO,EAAE,CAAC;oBACpD,MAAM,GAAI,UAAwC,CAAC,OAAO,CAAC;gBAC/D,CAAC;qBAAM,CAAC;oBACJ,MAAM,GAAG,UAA0B,CAAC;gBACxC,CAAC;gBAED,2GAA2G;gBAC3G,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;oBACZ,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBACpC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC;wBAChD,mEAAmE;wBACnE,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;4BAC3C,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAe,CAAC,CAAC;wBACpE,CAAC;6BAAM,CAAC;4BACJ,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gCACrB,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACvC,CAAC;iCAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC;gCAChC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;4BAC3C,CAAC;iCAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gCAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;4BAC1C,CAAC;iCAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gCAC5B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACvC,CAAC;4BAED,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;gCACrB,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;4BACtC,CAAC;iCAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gCAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;4BACzC,CAAC;iCAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;gCAC/B,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;4BACzC,CAAC;wBACL,CAAC;oBACL,CAAC;oBAED,uBAAuB;oBACvB,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;wBACf,IAAI,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;4BACpE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAuB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;wBAC1E,CAAC;6BAAM,IACH,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,QAAQ;4BAChC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,KAAK,cAAc,EACtD,CAAC;4BACC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;wBAC3D,CAAC;wBACD,UAAU;wBACV,IAAI,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,QAAQ,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,YAAY,EAAE,CAAC;4BAClE,gDAAgD;4BAChD,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,CAAC,CAAC;wBACxC,CAAC;oBACL,CAAC;gBACL,CAAC;gBAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;oBACzB,MAAM,GAAG,EAAE,CAAC;oBACZ,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;gBACzC,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEhE,OAAO,MAAM,CAAC;YAClB,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACT,OAAO,CAAC,KAAK,CAAC,6CAA6C,CAAC,EAAE,CAAC,CAAC;YACpE,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,MAAM,MAAM,GAA+B;gBACvC,KAAK;gBACL,GAAG;gBACH,UAAU,EAAE,KAAK;gBACjB,SAAS,EAAE,MAAM;gBACjB,KAAK,EAAE,IAAI;gBACX,IAAI,EAAE,KAAK;gBACX,GAAG,EAAE,KAAK;gBACV,CAAC,EAAE,KAAK;gBACR,KAAK,EAAE,KAAK;aACf,CAAC;YAEF,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;YAC3B,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YAElC,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAC1G,CAAC;YAED,IAAI,CAAC;gBACD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;gBACvD,IAAI,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC,SAAS,IAAI,GAAG,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS,EAAE,CAAC;oBACtE,OAAO,CAAC,IAAI,CACR,8CAA8C,GAAG,CAAC,SAAS,eAAe,IAAI,CAAC,SAAS,EAAE,CAC7F,CAAC;oBACF,OAAO,IAAI,CAAC;gBAChB,CAAC;gBAED,OAAO,GAAG,EAAE,MAAM,CAAC;YACvB,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACX,GAAG,KAAK,aAAa,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;gBACnE,GAAG,IAAI,OAAO,CAAC,KAAK,CAAC,gBAAgB,GAAG,EAAE,CAAC,CAAC;YAChD,CAAC;QACL,CAAC;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,WAAW,CAAC,EAAU;QAClB,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,YAAY,OAAO,CAAC,EAAE,CAAC;YAChD,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,GAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAmC,CAAC,KAAK,CACxF,CAAC,CAAU,EAAQ,EAAE;gBACjB,IAAK,CAAW,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;oBACtE,IAAI,CAAC,WAAW,CAAC,CAAU,CAAC,CAAC;gBACjC,CAAC;gBACD,OAAO,CAAC,KAAK,CAAC,gBAAgB,EAAE,MAAO,CAAW,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;gBACjE,OAAO,IAAI,CAAC;YAChB,CAAC,CACJ,CAAC;QACN,CAAC;QAED,OAAO,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,KAAa;QAC5B,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACxC,IAAI,CAAC;YACD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAElD,IAAI,GAAG,EAAE,MAAM,EAAE,CAAC;gBACd,MAAM,IAAI,GAAgC,UAAU,CAAC,IAAI,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC;gBAE7E,UAAU,CAAC,IAAI;oBACX,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ;wBAC5B,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,EAAE,IAAI,UAAU,CAAC,EAAE;wBAC9D,CAAC,CAAE,IAAe,IAAI,EAAE,CAAC;gBAEjC,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBAEhG,UAAU,CAAC,IAAI,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC;gBAElC,IAAI,UAAU,CAAC,SAAS,KAAK,MAAM,EAAE,CAAC;oBAClC,UAAU,CAAC,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;oBACxE,UAAU,CAAC,SAAS,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC;gBAC7E,CAAC;gBAED,qCAAqC;gBACrC,IAAI,UAAU,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,IAAI,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC;oBACnE,OAAO,UAAU,CAAC,IAAI,CAAC;gBAC3B,CAAC;gBAED,uBAAuB;gBACvB,IACI,GAAG,CAAC,MAAM,CAAC,MAAM;oBACjB,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;oBACjC,UAAU,CAAC,MAAM,KAAK,KAAK;oBAC3B,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAClB,CAAC;oBACC,IAAI,UAAU,CAAC,MAAM,EAAE,CAAC;wBACpB,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;oBAC5E,CAAC;yBAAM,CAAC;wBACJ,UAAU,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;oBAC1C,CAAC;oBAED,+DAA+D;oBAC/D,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,MAAM,IAAI,GAAG,KAAK,OAAO,CAAC,EAAE,CAAC;wBAChF,MAAM,MAAM,GAA2B,EAAE,CAAC;wBAC1C,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;4BACzC,MAAM,CAAC,GAAG,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAClD,UAAU,CAAC,MACd,CAAC,GAAG,CAAC,CAAC;wBACX,CAAC,CAAC,CAAC;wBACH,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC;oBAC/B,CAAC;oBAED,iCAAiC;oBACjC,IAAI,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,MAAM,EAAE,CAAC;wBACvC,OAAO,UAAU,CAAC,IAAI,CAAC;oBAC3B,CAAC;gBACL,CAAC;gBAED,2CAA2C;gBAC3C,IAAI,UAAU,CAAC,WAAW,IAAI,UAAU,CAAC,WAAW,KAAK,CAAC,EAAE,CAAC;oBACzD,UAAU,CAAC,IAAI,GAAG,KAAK,CAAC;gBAC5B,CAAC;YACL,CAAC;QACL,CAAC;QAAC,OAAO,CAAC,EAAE,CAAC;YACT,CAAC,KAAK,aAAa,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAC/D,OAAO,CAAC,KAAK,CAAC,mCAAmC,UAAU,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;QAC5E,CAAC;QAED,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,EAAE,IAAI,EAAE,CAAC;QACzD,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,IAAI,EAAE,CAAC;QACxC,IAAI,UAAU,CAAC,SAAS,KAAK,MAAM,EAAE,CAAC;YAClC,UAAU,CAAC,SAAS,GAAG,MAAM,CAAC;YAC9B,UAAU,CAAC,SAAS,GAAG,QAAQ,CAAC;QACpC,CAAC;QAED,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,IAAI,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;IAC9F,CAAC;IAED,KAAK,CAAC,SAAS;QACX,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5C,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC7B,CAAC;YACD,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC;gBACvB,MAAM,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAC/B,CAAC;QACL,CAAC;IACL,CAAC;IAED,KAAK,CAAC,SAAS;QACX,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACpB,MAAM,KAAK,GAAG,CAAC,CAAC;YAChB,MAAM,MAAM,GAA+B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAChG,MAAM,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,cAAc,CAAC;YACvE,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;YAClC,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC;YAE1B,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;gBACb,OAAO,CAAC,GAAG,CACP,uBAAuB,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAClG,CAAC;YACN,CAAC;YAED,IAAI,CAAC;gBACD,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;gBACtE,IAAI,IAAI,CAAC,SAAS,IAAI,GAAG,CAAC,SAAS,IAAI,GAAG,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS,EAAE,CAAC;oBACtE,OAAO,CAAC,IAAI,CACR,8CAA8C,GAAG,CAAC,SAAS,eAAe,IAAI,CAAC,SAAS,EAAE,CAC7F,CAAC;oBACF,OAAO;gBACX,CAAC;gBAED,MAAM,OAAO,GAAsB,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;gBACpD,IAAI,GAAG,EAAE,MAAM,EAAE,CAAC;oBACd,IAAI,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC;wBACrB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAC5C,CAAC;oBAED,MAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;oBAE1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;wBACrC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,IAAI,EAAE,CAAC;4BACzB,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;wBAC3D,CAAC;oBACL,CAAC;oBAED,oBAAoB;oBACpB,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;wBACjB,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;4BACrC,OAAO,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;wBACnD,CAAC;wBACD,IAAI,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC;4BACpD,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;wBAC9C,CAAC;oBACL,CAAC;yBAAM,CAAC;wBACJ,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;wBAC5C,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;oBAC9C,CAAC;oBACD,cAAc;oBACd,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC;gBACtB,CAAC;gBAED,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;YACzB,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACT,CAAC,KAAK,aAAa,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAC/D,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;YACvC,CAAC;QACL,CAAC;IACL,CAAC;IAED;;;;;;;;;;;;;;;;MAgBE;IAEF,KAAK,CAAC,YAAY;QACd,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;YACrB,OAAO;QACX,CAAC;QACD,gBAAgB;QAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAChD,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAClC,mBAAmB;YACnB,IACI,IAAI,CAAC,cAAc;gBACnB,OAAO,IAAI,CAAC,cAAc,KAAK,QAAQ;gBACvC,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC;gBAC5C,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,EACpG,CAAC;gBACC;;wBAEQ;gBACR,IAAI,CAAC;oBACD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;oBAC9D,IAAI,KAAK,IAAI,KAAK,CAAC,GAAG,KAAK,SAAS,IAAI,KAAK,CAAC,GAAG,KAAK,IAAI,EAAE,CAAC;wBACzD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,GAAa,CAAC,IAAI,CAAC,CAAC;oBAC3D,CAAC;yBAAM,CAAC;wBACJ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBAC3B,CAAC;gBACL,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACT,CAAC,KAAK,aAAa,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBAC/D,OAAO,CAAC,KAAK,CAAC,uBAAuB,IAAI,CAAC,cAAc,KAAK,CAAC,EAAE,CAAC,CAAC;gBACtE,CAAC;YACL,CAAC;YAED,mBAAmB;YACnB,IACI,IAAI,CAAC,cAAc;gBACnB,OAAO,IAAI,CAAC,cAAc,KAAK,QAAQ;gBACvC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC;gBACjC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,QAAQ,EAAE,KAAK,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,EACzF,CAAC;gBACC;;wBAEQ;gBACR,IAAI,CAAC;oBACD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;oBAC9D,IAAI,KAAK,IAAI,KAAK,CAAC,GAAG,KAAK,SAAS,IAAI,KAAK,CAAC,GAAG,KAAK,IAAI,EAAE,CAAC;wBACzD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,GAAa,CAAC,IAAI,CAAC,CAAC;oBAC3D,CAAC;yBAAM,CAAC;wBACJ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;oBAC3B,CAAC;gBACL,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACT,CAAC,KAAK,aAAa,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBAC/D,OAAO,CAAC,KAAK,CAAC,uBAAuB,IAAI,CAAC,cAAc,KAAK,CAAC,EAAE,CAAC,CAAC;gBACtE,CAAC;YACL,CAAC;QACL,CAAC;IACL,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,UAAqB;QACpC,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,UAAU,EAAE,MAAM,EAAE,CAAC;YACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACzC,IAAI,CAAC;oBACD,MAAM,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;gBACxE,CAAC;gBAAC,OAAO,CAAC,EAAE,CAAC;oBACT,CAAC,KAAK,aAAa,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;oBAC/D,OAAO,CAAC,KAAK,CAAC,oBAAoB,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBAC7D,CAAC;YACL,CAAC;QACL,CAAC;IACL,CAAC;IAED,UAAU;QACN,iCAAiC;QACjC,MAAM,UAAU,GAAuB,EAAE,CAAC;QAC1C,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YAClC,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,EAAE,CAAC;gBAC3B,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC5C,CAAC;iBAAM,CAAC;gBACJ,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC/C,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACzE,CAAC;IAED,aAAa,GAAG,CAAC,EAAU,EAAE,KAAwC,EAAQ,EAAE;QAC3E,IAAI,CAAC,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;YAChC,OAAO;QACX,CAAC;QAED,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,OAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,MAAM,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,OAAO,GAAG,KAAK,CAAC;QACpB,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC;YACxD,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,CAAC;gBACjC,kDAAkD;gBAClD,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,KAAK,MAAM,EAAE,CAAC;oBAC3C,IAAI,CAAC;wBACD,MAAM,QAAQ,GAA6C,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,GAAa,CAAC,CAAC;wBAC5F,IAAI,IAAkB,CAAC;wBACvB,IAAK,QAAsC,CAAC,OAAO,EAAE,CAAC;4BAClD,IAAI,GAAI,QAAsC,CAAC,OAAO,CAAC;wBAC3D,CAAC;6BAAM,CAAC;4BACJ,IAAI,GAAG,QAAwB,CAAC;wBACpC,CAAC;wBAED,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC;4BACvB,IAAI,GAAG,EAAE,CAAC;4BACV,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;wBACzC,CAAC;wBACD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAC9D,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;wBAEnE,IAAI,MAAM,CAAC,OAAO,EAAE,CAAC;4BACjB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC;wBACzC,CAAC;6BAAM,CAAC;4BACJ,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC;wBAC/C,CAAC;wBAED,kCAAkC;wBAClC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;4BACpB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;wBACzD,CAAC;wBAED,IAAI,CAAC,UAAU,EAAE,CAAC;oBACtB,CAAC;oBAAC,OAAO,CAAC,EAAE,CAAC;wBACT,OAAO,CAAC,KAAK,CAAC,sBAAsB,CAAC,EAAE,CAAC,CAAC;oBAC7C,CAAC;oBAED,OAAO;gBACX,CAAC;gBAED,MAAM,KAAK,GAAG,UAAU,CAAC,eAAe,CACpC,KAAK,CAAC,GAAG,EACT,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,EACnD,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,IAAI,CAAC,CACpC,CAAC;gBAEF,IAAI,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAK,KAAK,EAAE,CAAC;oBAC1D,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;oBACjC,OAAO,GAAG,IAAI,CAAC;gBACnB,CAAC;gBACD,MAAM;YACV,CAAC;QACL,CAAC;QACD,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAC1D,CAAC,CAAC;IAEF,MAAM,CAAC,OAAO,CACV,IAAmB,EACnB,MAAuB,EACvB,iBAA2B;QAE3B,MAAM,IAAI,GAAS,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;QAElC,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE,CAAC;YAC7B,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;gBACzC,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,MAAM,CAAC,CAAC;gBACxC,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YAC1B,CAAC;iBAAM,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC;gBAChD,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBAC9B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,MAAM,CAAC,CAAC;gBAC9C,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YAC1B,CAAC;iBAAM,CAAC;gBACJ,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;gBACtB,IAAI,iBAAiB,EAAE,CAAC;oBACpB,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;gBAChD,CAAC;qBAAK,CAAC;oBACH,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;gBAC/C,CAAC;YACL,CAAC;QACL,CAAC;aAAM,CAAC;YACJ,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC;YACrB,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;YACtB,IAAI,iBAAiB,EAAE,CAAC;gBACpB,IAAI,IAAI,MAAM,GAAG,KAAK,CAAC;YAC3B,CAAC;iBAAM,CAAC;gBACJ,IAAI,IAAI,MAAM,GAAG,IAAI,CAAC;YAC1B,CAAC;QACL,CAAC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,IAAY,EAAE,EAAU,EAAE,QAAmB;QAC1D,oBAAoB;QACpB,MAAM,MAAM,GAAyC,EAAE,CAAC;QACxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAC5C,IAAI,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;gBACvF,SAAS;YACb,CAAC;YACD,IAAI,IAAI,GAAG,MAAM,IAAI,CAAC,eAAe,CACjC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EACnB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,cAAc,EAChD,IAAI,EACJ,EAAE,CACL,CAAC;YACF,IAAI,KAAK,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC5D,IAAI,MAAM,GAAG,IAAI,CAAC;YAClB,OAAO,MAAM,EAAE,MAAM,KAAK,IAAI,EAAE,CAAC;gBAC7B,MAAM,GAAG,MAAM,IAAI,CAAC,eAAe,CAC/B,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EACnB,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,cAAc,EAChD,KAAK,EACL,EAAE,CACL,CAAC;gBACF,KAAK,GAAG,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACvE,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC/B,CAAC;YACD,IAAI,MAAM,EAAE,CAAC;gBACT,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;YACzC,CAAC;QACL,CAAC;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAED,KAAK,CAAC,QAAQ;QACV,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;YACrC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAClC,CAAC;QAED,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACtB,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;QAC1D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC;QACrC,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,IAAI,CAAC,SAAS,GAAG,QAAQ,EAAE,CAAC;YAC5B,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;QACvB,CAAC;QAED,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;YAChB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACpB,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAE/C,OAAO;YACP,uGAAuG;YACvG,EAAE;YACF,oCAAoC;YACpC,kEAAkE;YAClE,qFAAqF;YACrF,0DAA0D;YAC1D,kGAAkG;YAClG,kCAAkC;YAClC,qFAAqF;YACrF,2BAA2B;YAC3B,kEAAkE;YAClE,mDAAmD;YACnD,2BAA2B;YAC3B,yBAAyB;YACzB,mBAAmB;YACnB,sBAAsB;YACtB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;YACrB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;YAClB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;YAE1B,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;YACvB,6BAA6B;YAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC5C,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,KAAK,CAAC,EAAE,CAAC;oBACrE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;gBAC7E,CAAC;YACL,CAAC;YAED,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;YACvB,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;YAC1B;;;gBAGI;YACJ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YAErB,IAAI,CAAC,UAAU,EAAE,CAAC;QACtB,CAAC;aAAM,CAAC;YACJ,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;YACtE,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAChD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACzB,CAAC;IACL,CAAC;CACJ;AAED,kBAAe,UAAU,CAAC","sourcesContent":["import type { Connection } from '../types';\nimport type {\n    ChartAggregateType,\n    ChartMarkConfig,\n    ChartType,\n    ChartConfig,\n    ChartRelativeEnd,\n    ChartLineConfig,\n    ChartRangeOptions,\n} from '../types';\n\n/*\nfunction deParam(params, coerce) {\n    const obj = {};\n    const coerceTypes = {'true': true, 'false': false, 'null': null};\n\n    // Iterate over all name=value pairs.\n    params.replace(/\\+/g, ' ').split('&').forEach(v => {\n        const param = v.split('=');\n        let key = decodeURIComponent(param[0]);\n        let val;\n        let i = 0;\n\n        // If key is more complex than 'foo', like 'a[]' or 'a[b][c]', split it\n        // into its component parts.\n        let keys = key.split('][');\n        let keysLast = keys.length - 1;\n\n        // If the first keys part contains [ and the last ends with ], then []\n        // are correctly balanced.\n        if (/\\[/.test(keys[0]) && /]$/.test(keys[keysLast])) {\n            // Remove the trailing ] from the last keys part.\n            keys[keysLast] = keys[keysLast].replace(/]$/, '');\n\n            // Split first keys part into two parts on the [ and add them back onto\n            // the beginning of the keys array.\n            keys = keys.shift().split('[').concat(keys);\n\n            keysLast = keys.length - 1;\n        } else {\n            // Basic 'foo' style key.\n            keysLast = 0;\n        }\n\n        // Are we dealing with a name=value pair, or just a name?\n        if (param.length === 2) {\n            val = decodeURIComponent(param[1]);\n\n            // Coerce values.\n            if (coerce) {\n                val = val && !isNaN(val) && ((+val + '') === val) ? +val        // number\n                    : val === 'undefined' ? undefined         // undefined\n                        : coerceTypes[val] !== undefined ? coerceTypes[val] // true, false, null\n                            : val;                                                          // string\n            }\n\n            if (keysLast) {\n                let cur = obj;\n                // Complex key, build deep object structure based on a few rules:\n                // * The 'cur' pointer starts at the object top-level.\n                // * [] = array push (n is set to array length), [n] = array if n is\n                //   numeric, otherwise object.\n                // * If at the last keys part, set the value.\n                // * For each keys part, if the current level is undefined create an\n                //   object or array based on the type of the next keys part.\n                // * Move the 'cur' pointer to the next level.\n                // * Rinse & repeat.\n                for (; i <= keysLast; i++) {\n                    key = keys[i] === '' ? cur.length : keys[i];\n                    cur = cur[key] = i < keysLast\n                        ? cur[key] || (keys[i + 1] && isNaN(keys[i + 1]) ? {} : [])\n                        : val;\n                }\n\n            } else {\n                // Simple key, even simpler rules, since only scalars and shallow\n                // arrays are allowed.\n\n                if (Object.prototype.toString.call(obj[key]) === '[object Array]') {\n                    // val is already an array, so push on the next value.\n                    obj[key].push(val);\n                } else if ({}.hasOwnProperty.call(obj, key)) {\n                    // val isn't an array, but since a second value has been specified,\n                    // convert val into an array.\n                    obj[key] = [obj[key], val];\n                } else {\n                    // val is a scalar.\n                    obj[key] = val;\n                }\n            }\n        } else if (key) {\n            // No value was defined, so set something meaningful.\n            obj[key] = coerce\n                ? undefined\n                : '';\n        }\n    });\n\n    return obj;\n}\n*/\n\nexport type EchartsOneValue = { value: [number, number]; exact?: false };\ntype EchartsAnyValue = { value: [number, number | string | boolean]; exact?: false };\n\nexport type ChartLineConfigOld = {\n    // @deprecated use chartType\n    art?: ChartAggregateType;\n\n    id: string;\n    unit: string;\n\n    offset?: number;\n    name?: string;\n    aggregate?: ChartAggregateType;\n    color?: string;\n    thickness?: number;\n    shadowsize?: number;\n    min?: number | '';\n    max?: number | '';\n\n    yOffset?: number;\n    validTime?: number;\n    chartType?: ChartType;\n\n    instance?: string;\n};\n\nexport type ChartMarkConfigOld = {\n    l: number; // lineId\n    v: string | number; // upperValueOrId\n    vl: string | number; // lowerValueOrId\n    c: string; // color\n    f: string | number; // fill\n    t: number; // ol - line width\n    s: number; // os - shadow\n    d: string; // text - descriptions\n    p: 'r' | 'l'; // textPosition\n    py: number; // textOffset\n    fc: string; // textColor\n    fs: number; // textSize\n};\n\nexport type ChartConfigOld = {\n    // @deprecated use \"l\"\n    chartType?: 'auto' | 'bar' | 'polar' | 'line';\n    // @deprecated use \"l\"\n    instance?: string;\n    // @deprecated use \"l\"\n    lines?: ChartLineConfigOld[];\n    // @deprecated use \"l\"\n    _ids?: string;\n    // @deprecated use \"l\"\n    _colors?: string;\n    // @deprecated use \"l\"\n    _names?: string;\n    // @deprecated use \"l\"\n    strokeWidth?: number;\n    // @deprecated use \"l\"\n    min?: number;\n    // @deprecated use \"l\"\n    max?: number;\n    // @deprecated use \"l\"\n    _units?: string;\n    // @deprecated use \"marks\"\n    m: ChartMarkConfigOld[];\n\n    aggregateType: 'step' | 'count';\n    aggregateSpan: number;\n    relativeEnd: 'now' | 'month' | 'year' | 'minute' | 'hour' | 'weekUsa' | 'weekEurope' | 'week2Usa' | 'week2Europe';\n\n    l: ChartLineConfigOld[];\n    marks: ChartMarkConfig[];\n\n    width: string | number;\n    height: string | number;\n    timeFormat?: string;\n    useComma: string | boolean;\n    zoom: string | boolean;\n    export: string | boolean;\n    grid_hideX: string | boolean;\n    grid_hideY: string | boolean;\n    hoverDetail: string | boolean;\n    noLoader: string | boolean;\n    noedit: string | boolean;\n    animation: string | number;\n    afterComma?: string | number;\n    timeType: 'relative' | 'static';\n    xLabelShift: number | string;\n    xLabelShiftMonth?: boolean;\n    xLabelShiftYear?: boolean;\n};\n\nexport type LineSeries = EchartsOneValue[];\nexport type BarSeries = number[];\nexport type BarAndLineSeries = BarSeries | LineSeries;\n\nexport interface SeriesData extends Omit<ioBroker.State, 'lc' | 'from'> {\n    // Name of state, like \"system.adapter.admin.0.memHeap\"\n    id?: string;\n\n    // All possible names for value (will be converted to val)\n    y?: number;\n    value?: number;\n    data?: number;\n    v?: number;\n\n    // All possible names for timestamp (will be converted to ts)\n    t?: number;\n    time?: number;\n    date?: number;\n\n    /** Interpolated */\n    i?: boolean;\n\n    ack: boolean;\n\n    /** Name of the adapter instance which set the value, e.g. \"system.adapter.web.0\" */\n    from?: string;\n}\n\n/**\n * Parse a query string into its parts.\n * Copied from @iobroker/adapter-react-v5/Components/Utils\n */\nfunction parseQuery(query: string): Record<string, number | boolean | string> {\n    query = (query || '').toString().replace(/^\\?/, '');\n    const result: Record<string, number | boolean | string> = {};\n    query.split('&').forEach(part => {\n        part = part.trim();\n        if (part) {\n            const parts = part.split('=');\n            const attr = decodeURIComponent(parts[0]).trim();\n            if (parts.length > 1) {\n                result[attr] = decodeURIComponent(parts[1]);\n                if (result[attr] === 'true') {\n                    result[attr] = true;\n                } else if (result[attr] === 'false') {\n                    result[attr] = false;\n                } else {\n                    const f = parseFloat(result[attr] as unknown as string);\n                    if (f.toString() === result[attr]) {\n                        result[attr] = f;\n                    }\n                }\n            } else {\n                result[attr] = true;\n            }\n        }\n    });\n    return result;\n}\n\n// Do not forget to change normalizeConfig in src/utils/flotConverter.js too\nfunction normalizeConfig(config: ChartConfigOld): ChartConfig {\n    const newConfig: ChartConfig = JSON.parse(JSON.stringify(config));\n\n    if (config.lines) {\n        newConfig.l = config.lines as ChartLineConfig[];\n        // @ts-expect-error delete old structure\n        delete newConfig.lines;\n    }\n\n    if (config._ids) {\n        const ids = config._ids ? config._ids.split(';') : [];\n        const colors = config._colors ? config._colors.split(';') : [];\n        const names = config._names ? config._names.split(';') : [];\n        const units = config._units ? config._units.split(';') : [];\n        newConfig.l = [];\n        for (let i = 0; i < ids.length; i++) {\n            newConfig.l.push({\n                id: ids[i],\n                offset: 0,\n                name: names[i] || undefined,\n                aggregate: 'none',\n                color: colors[i] || 'blue',\n                thickness: config.strokeWidth || 1,\n                shadowsize: config.strokeWidth || 1,\n                min: config.min || undefined,\n                max: config.max || undefined,\n                unit: units[i] || undefined,\n            });\n        }\n        newConfig.aggregateType = 'step';\n        newConfig.aggregateSpan = 300;\n        newConfig.relativeEnd = 'now';\n    }\n\n    // convert art to aggregate (from flot)\n    if (config.l) {\n        for (let j = 0; j < config.l.length; j++) {\n            if (config.l[j].art) {\n                config.l[j].aggregate = config.l[j].art;\n                delete config.l[j].art;\n            }\n            if (config.instance && !config.l[j].instance) {\n                config.l[j].instance = config.instance;\n            }\n            config.l[j].yOffset = parseFloat(config.l[j].yOffset as unknown as string) || 0;\n            config.l[j].offset = parseFloat(config.l[j].offset as unknown as string) || 0;\n            config.l[j].validTime = parseFloat(config.l[j].validTime as unknown as string) || 0;\n            config.l[j].chartType = config.l[j].chartType || config.chartType || 'auto';\n        }\n    }\n\n    config.l = config.l || [];\n\n    // convert marks\n    if (config.m) {\n        newConfig.marks = [];\n        for (let j = 0; j < config.m.length; j++) {\n            newConfig.marks[j] = {\n                lineId: config.m[j].l,\n                upperValueOrId: config.m[j].v,\n                lowerValueOrId: config.m[j].vl,\n                color: config.m[j].c,\n                fill: parseFloat(config.m[j].f as string),\n                ol: config.m[j].t,\n                os: config.m[j].s,\n                text: config.m[j].d,\n                textPosition: config.m[j].p,\n                textOffset: config.m[j].py,\n                textColor: config.m[j].fc,\n                textSize: config.m[j].fs,\n            };\n        }\n        // @ts-expect-error delete old structure\n        delete newConfig.m;\n    }\n\n    newConfig.marks = newConfig.marks || [];\n\n    if (!newConfig.l.length) {\n        config.l.push({ id: '', unit: '' });\n    }\n\n    // Set default values\n    newConfig.width = config.width || '100%';\n    newConfig.height = config.height || '100%';\n    // if width or height does not have any units, add px to it\n    if (parseFloat(newConfig.width as string).toString() === newConfig.width.toString().trim()) {\n        newConfig.width += 'px';\n    }\n    if (parseFloat(newConfig.height as string).toString() === newConfig.height.toString().trim()) {\n        newConfig.height += 'px';\n    }\n\n    newConfig.timeFormat = config.timeFormat || '';\n    newConfig.useComma = config.useComma === 'true' || config.useComma === true;\n    newConfig.zoom = config.zoom === 'true' || config.zoom === true;\n    newConfig.export = config.export === 'true' || config.export === true;\n    newConfig.grid_hideX = config.grid_hideX === 'true' || config.grid_hideX === true;\n    newConfig.grid_hideY = config.grid_hideY === 'true' || config.grid_hideY === true;\n    newConfig.hoverDetail = config.hoverDetail === 'true' || config.hoverDetail === true;\n    newConfig.noLoader = config.noLoader === 'true' || config.noLoader === true;\n    newConfig.noedit = config.noedit === 'true' || config.noedit === true;\n    newConfig.animation = parseInt(config.animation as string, 10) || 0;\n    newConfig.afterComma = config.afterComma === undefined ? 2 : parseInt(config.afterComma as string, 10);\n    newConfig.timeType = config.timeType || 'relative';\n    if (config.xLabelShift) {\n        if (typeof config.xLabelShift === 'string' && config.xLabelShift.endsWith('m')) {\n            newConfig.xLabelShift = parseInt(config.xLabelShift.substring(0, config.xLabelShift.length - 1), 10) || 0;\n            newConfig.xLabelShiftMonth = true;\n        } else if (typeof config.xLabelShift === 'string' && config.xLabelShift.endsWith('y')) {\n            newConfig.xLabelShift = parseInt(config.xLabelShift.substring(0, config.xLabelShift.length - 1), 10) || 0;\n            newConfig.xLabelShiftYear = true;\n        } else {\n            newConfig.xLabelShift = parseInt(config.xLabelShift as string, 10) || 0;\n        }\n    }\n\n    return newConfig;\n}\n\nconst NOT_CONNECTED = 'notConnectedError';\n\nclass ChartModel {\n    private readonly socket: Connection;\n    private readonly updateTimeout: number;\n    private readonly serverSide: boolean;\n    // For line charts\n    private seriesData: LineSeries[] = [];\n    // For Bar or polar charts\n    private barData: BarSeries[] = [];\n    // Actual values for every line/bar. Only if config.legActual === true\n    private readonly actualValues: (number | null | boolean | string)[] = [];\n    private ticks: EchartsAnyValue[] = null;\n    private reading: boolean = false;\n    private subscribes: string[] = [];\n    private sessionId: number = 1;\n    // update interval by time\n    private updateInterval: ReturnType<typeof setInterval> | null = null;\n    private presetUpdateTimeout: ReturnType<typeof setTimeout> | null = null;\n    private readOnZoomTimeout: ReturnType<typeof setTimeout> | null = null;\n    private subscribed: boolean = false;\n    // Is preset subscribed yet or not\n    private presetSubscribed: string = '';\n    private defaultHistory: string = '';\n    private onUpdateFunc:\n        | ((\n              seriesData: BarAndLineSeries[],\n              actualValues?: (number | null | boolean | string)[],\n              barCategories?: number[],\n          ) => void)\n        | null = null;\n    private onReadingFunc: ((isReading: boolean) => void) | null = null;\n    private onErrorFunc: ((error: Error) => void) | null = null;\n    private objectPromises: Record<string, Promise<ioBroker.ChartObject | null | undefined>> = {};\n    private debug = false;\n    private zoomData: { stopLive?: boolean; start?: number; end?: number } | null = null;\n    private lastHash: string;\n    private onHashInstalled: boolean = false;\n    private systemConfig: ioBroker.SystemConfigCommon | null = null;\n    private preset?: string;\n    private config?: ChartConfig;\n    private barCategories?: number[];\n    private now: number = Date.now();\n    private hash?: {\n        range: ChartRangeOptions;\n        relativeEnd: ChartRelativeEnd;\n    };\n\n    private convertFunctions: Record<string, (val: number) => number> = {};\n\n    constructor(\n        socket: Connection,\n        /** Config or preset ID */\n        config: ChartConfigOld | string,\n        options?: { updateTimeout?: number; serverSide?: boolean; compact?: boolean },\n    ) {\n        options = { updateTimeout: 300, ...(options || {}) };\n        this.socket = socket;\n\n        this.updateTimeout = options.updateTimeout || 300; // how often the new data will be requested by zoom and pan\n        this.serverSide = options.serverSide || false; // if rendering is serverside\n\n        if (!this.serverSide) {\n            this.lastHash = window.location.hash;\n\n            if (!config) {\n                this.onHashInstalled = true;\n                window.addEventListener('hashchange', this.onHashChange, false);\n            }\n        } // else node.js\n\n        void this.socket\n            .getSystemConfig()\n            .catch((e: unknown): null => {\n                if ((e as Error).toString().includes(NOT_CONNECTED) && this.onErrorFunc) {\n                    this.onErrorFunc(e as Error);\n                }\n                console.error(`Cannot read systemConfig: ${(e as Error).toString()}`);\n                return null;\n            })\n            .then((systemConfig: ioBroker.SystemConfigObject): Promise<void> => {\n                this.systemConfig = systemConfig?.common ? systemConfig.common : ({} as ioBroker.SystemConfigCommon);\n                this.defaultHistory = this.systemConfig.defaultHistory;\n                return this.analyseAndLoadConfig(config);\n            });\n    }\n\n    async analyseAndLoadConfig(config?: string | ChartConfigOld): Promise<void> {\n        if (config) {\n            if (typeof config === 'string') {\n                this.preset = config;\n            } else {\n                this.config = normalizeConfig(config);\n            }\n        } else if (!this.serverSide) {\n            const query: Record<string, number | string | boolean> = parseQuery(window.location.search); // Utils.parseQuery\n\n            this.debug = query.debug === true || query.debug === 'true' || query.debug === 1 || query.debug === '1';\n\n            if (query.preset && typeof query.preset === 'string') {\n                this.preset = query.preset;\n            } else {\n                const hQuery: Record<string, number | string | boolean> = parseQuery(\n                    (window.location.hash || '').toString().replace(/^#/, ''),\n                ); // Utils.parseQuery\n                let config: ChartConfigOld = {} as ChartConfigOld;\n\n                if (hQuery.data && typeof hQuery.data === 'string') {\n                    try {\n                        config = JSON.parse(hQuery.data);\n                    } catch {\n                        // ignore\n                    }\n                }\n                if (query.data && typeof query.data === 'string') {\n                    try {\n                        Object.assign(config, JSON.parse(query.data), true);\n                    } catch {\n                        // ignore\n                    }\n                }\n                if (hQuery.preset) {\n                    this.preset = hQuery.preset as string;\n                    if (hQuery.range || hQuery.relativeEnd) {\n                        this.hash = {\n                            range: hQuery.range as ChartRangeOptions,\n                            relativeEnd: hQuery.relativeEnd as ChartRelativeEnd,\n                        };\n                    }\n                } else {\n                    // search ID and range\n                    if (hQuery.noLoader !== undefined) {\n                        config.noLoader =\n                            hQuery.noLoader === true ||\n                            hQuery.noLoader === 'true' ||\n                            hQuery.noLoader === 1 ||\n                            hQuery.noLoader === '1';\n                    }\n                    if (query.noLoader !== undefined) {\n                        config.noLoader =\n                            query.noLoader === true ||\n                            query.noLoader === 'true' ||\n                            query.noLoader === 1 ||\n                            query.noLoader === '1';\n                    }\n                    this.config = normalizeConfig(config);\n                    // console.log(this.config);\n                }\n            }\n        }\n\n        this.seriesData = [];\n        this.barData = [];\n        this.barCategories = null;\n\n        if (this.updateInterval) {\n            clearInterval(this.updateInterval);\n            this.updateInterval = null;\n        }\n\n        if (this.preset) {\n            if (\n                (!this.preset.startsWith('echarts.') && !this.preset.startsWith('flot.')) ||\n                !this.preset.includes('.')\n            ) {\n                this.preset = `echarts.0.${this.preset}`;\n            }\n\n            try {\n                const obj: ioBroker.ChartObject | null | undefined = (await this.socket.getObject(this.preset)) as\n                    | ioBroker.ChartObject\n                    | null\n                    | undefined;\n                if (!obj?.native?.data || obj.type !== 'chart') {\n                    console.error(`[ChartModel] Invalid object ${this.preset}: ${JSON.stringify(obj)}`);\n                    return;\n                }\n                this.config = normalizeConfig(obj.native.data);\n                this.config.useComma =\n                    this.config.useComma === undefined ? this.systemConfig.isFloatComma : this.config.useComma;\n                this.config.lang = this.systemConfig.language;\n                this.config.live = parseInt(this.config.live as unknown as string, 10) || 0;\n                this.config.debug = this.debug;\n                this.config.presetId = this.preset;\n\n                if (this.hash?.range) {\n                    if (\n                        typeof this.hash.range === 'string' &&\n                        !this.hash.range.includes('y') &&\n                        !this.hash.range.includes('m')\n                    ) {\n                        this.config.range = parseInt(this.hash.range, 10);\n                    } else {\n                        this.config.range = this.hash.range;\n                    }\n                }\n                if (this.hash?.relativeEnd) {\n                    this.config.relativeEnd = this.hash.relativeEnd;\n                }\n\n                await this.readData();\n\n                // subscribe on preset changes\n                if (!this.serverSide && this.presetSubscribed !== this.preset) {\n                    this.presetSubscribed &&\n                        (await this.socket.unsubscribeObject(this.presetSubscribed, this.onPresetUpdate));\n                    this.presetSubscribed = this.preset;\n                    await this.socket.subscribeObject(this.preset, this.onPresetUpdate);\n                }\n                if (!this.serverSide && this.config.live && !this.zoomData?.stopLive) {\n                    this.updateInterval = setInterval(() => this.readData(), this.config.live * 1000);\n                }\n            } catch (e) {\n                e === NOT_CONNECTED && this.onErrorFunc && this.onErrorFunc(e);\n                console.error(`Cannot read \"${this.preset}\": ${e}`);\n            }\n        } else {\n            this.config.useComma =\n                this.config.useComma === undefined\n                    ? this.systemConfig.isFloatComma === true\n                    : this.config.useComma === true;\n            this.config.lang = this.systemConfig.language;\n            this.config.live = parseInt(this.config.live as unknown as string, 10) || 0;\n            this.config.debug = this.debug;\n            await this.readData();\n            if (!this.serverSide && this.config.live && !this.zoomData?.stopLive) {\n                this.updateInterval = setInterval(() => this.readData(), this.config.live * 1000);\n            }\n        }\n    }\n\n    onHashChange = (): void => {\n        if (this.lastHash !== window.location.hash) {\n            this.lastHash = window.location.hash;\n            void this.analyseAndLoadConfig();\n        }\n    };\n\n    onPresetUpdate = (id: string, obj: ioBroker.Object | null | undefined): void => {\n        if (id !== this.preset) {\n            return;\n        }\n        if (this.presetUpdateTimeout) {\n            clearTimeout(this.presetUpdateTimeout);\n        }\n        this.presetUpdateTimeout = setTimeout(() => {\n            this.presetUpdateTimeout = null;\n            let newConfig;\n            if (obj) {\n                newConfig = normalizeConfig(obj.native.data);\n            } else {\n                newConfig = normalizeConfig({} as ChartConfigOld);\n            }\n            if (JSON.stringify(newConfig) !== JSON.stringify(this.config)) {\n                this.config = newConfig;\n                this.updateInterval && clearInterval(this.updateInterval);\n                this.updateInterval = null;\n\n                if (this.config.live && (!this.zoomData || !this.zoomData.stopLive)) {\n                    this.updateInterval = setInterval(() => this.readData(), this.config.live * 1000);\n                }\n\n                void this.readData();\n            }\n        }, 100);\n    };\n\n    setNewRange(options?: { stopLive?: boolean; start?: number; end?: number }): void {\n        if (this.debug) {\n            console.log(`[ChartModel] [${new Date().toISOString()}] setNewRange: ${JSON.stringify(options)}`);\n        }\n\n        if (!options) {\n            if (this.zoomData) {\n                this.zoomData = null;\n                this.readOnZoomTimeout && clearTimeout(this.readOnZoomTimeout);\n                this.readOnZoomTimeout = setTimeout(() => {\n                    this.readOnZoomTimeout = null;\n                    if (this.config.live && (!this.zoomData || !this.zoomData.stopLive)) {\n                        console.log('Restore update');\n                        this.updateInterval && clearInterval(this.updateInterval);\n                        this.updateInterval = setInterval(() => this.readData(), this.config.live * 1000);\n                    }\n                    void this.readData();\n                }, this.updateTimeout);\n            }\n        } else if (options.stopLive) {\n            this.zoomData = this.zoomData || {};\n            this.zoomData.stopLive = true;\n            if (this.updateInterval) {\n                console.log('Clear interval');\n                clearInterval(this.updateInterval);\n                this.updateInterval = null;\n            }\n        } else {\n            // options = {start, end}\n            const stopLive = this.zoomData?.stopLive;\n            if (stopLive) {\n                delete this.zoomData.stopLive;\n            }\n            if (!this.zoomData || JSON.stringify(this.zoomData) !== JSON.stringify(options)) {\n                this.zoomData = options;\n                if (stopLive) {\n                    this.zoomData.stopLive = true;\n                }\n                this.readOnZoomTimeout && clearTimeout(this.readOnZoomTimeout);\n                this.readOnZoomTimeout = setTimeout(() => {\n                    this.readOnZoomTimeout = null;\n                    void this.readData();\n                }, this.updateTimeout);\n            } else if (stopLive) {\n                this.zoomData.stopLive = true;\n            }\n        }\n    }\n\n    destroy(): void {\n        if (this.subscribed) {\n            if (!this.serverSide) {\n                this.subscribes.forEach(id => this.socket.unsubscribeState(id, this.onStateChange));\n            }\n            this.subscribes = [];\n            this.subscribed = false;\n        }\n        if (this.readOnZoomTimeout) {\n            clearTimeout(this.readOnZoomTimeout);\n            this.readOnZoomTimeout = null;\n        }\n        if (this.presetUpdateTimeout) {\n            clearTimeout(this.presetUpdateTimeout);\n            this.presetUpdateTimeout = null;\n        }\n        if (this.presetSubscribed) {\n            if (!this.serverSide) {\n                void this.socket.unsubscribeObject(this.presetSubscribed, this.onPresetUpdate);\n            }\n            this.presetSubscribed = null;\n        }\n        if (this.updateInterval) {\n            clearInterval(this.updateInterval);\n            this.updateInterval = null;\n        }\n        if (!this.serverSide) {\n            if (this.onHashInstalled) {\n                window.removeEventListener('hashchange', this.onHashChange, false);\n                this.onHashInstalled = false;\n            }\n        }\n    }\n\n    onUpdate(\n        cb:\n            | ((\n                  seriesData: BarAndLineSeries[],\n                  actualValues?: (number | null | boolean | string)[],\n                  barCategories?: number[],\n              ) => void)\n            | null,\n    ): void {\n        this.onUpdateFunc = cb;\n    }\n\n    onReading(cb: ((isReading: boolean) => void) | null): void {\n        this.onReadingFunc = cb;\n    }\n\n    onError(cb: ((err: Error) => void) | null): void {\n        this.onErrorFunc = cb;\n    }\n\n    getConfig(): ChartConfig {\n        return this.config;\n    }\n\n    getSystemConfig(): ioBroker.SystemConfigCommon {\n        return this.systemConfig;\n    }\n\n    setConfig(config: ChartConfig | ChartConfigOld): void {\n        void this.analyseAndLoadConfig(config as ChartConfigOld);\n    }\n\n    increaseRegionForBar(start: number | Date, end: number | Date, option: ioBroker.GetHistoryOptions): void {\n        this.config.aggregateBar = parseInt(this.config.aggregateBar as unknown as string, 10) || 0;\n        let endTs = typeof end === 'number' ? end : end.getTime();\n        let startTs = typeof start === 'number' ? start : start.getTime();\n\n        // calculate count of intervals\n        if (!this.config.aggregateBar) {\n            if (endTs - startTs <= 3600000 * 12) {\n                // less than 12 hours => 15 minutes\n                this.config.aggregateBar = 15;\n            } else if (endTs - startTs >= 3600000 * 24 * 60) {\n                // more than 60 days => 1 month\n                this.config.aggregateBar = 43200;\n            } else if (endTs - startTs > 3600000 * 24 * 3) {\n                // more than 3 days => 1 day\n                this.config.aggregateBar = 1440;\n            } else {\n                // if (endTs - startTs > 3600000 * 12) { // more than 12 hours => 60 minutes\n                this.config.aggregateBar = 60;\n            }\n        }\n\n        option = option || ({} as ioBroker.GetHistoryOptions);\n\n        if (this.config.aggregateBar === 15) {\n            // align start and stop to 15 minutes\n            const startDate = new Date(startTs);\n            startDate.setMinutes(Math.floor(startDate.getMinutes() / 15) * 15);\n            if (this.config.postProcessing === 'diff') {\n                startDate.setMinutes(startDate.getMinutes() - 15);\n            }\n            startDate.setSeconds(0);\n            startDate.setMilliseconds(0);\n            startTs = startDate.getTime();\n\n            const endDate = new Date(endTs);\n            endDate.setMinutes(Math.ceil(endDate.getMinutes() / 15) * 15);\n            endDate.setSeconds(0);\n            endDate.setMilliseconds(0);\n            endTs = endDate.getTime();\n            option.count = Math.round((endTs - startTs) / 900000);\n        } else if (this.config.aggregateBar === 60) {\n            // align start and stop to 1 hour\n            const startDate = new Date(startTs);\n            startDate.setMinutes(0);\n            startDate.setSeconds(0);\n            startDate.setMilliseconds(0);\n            if (this.config.postProcessing === 'diff') {\n                startDate.setMinutes(startDate.getMinutes() - 60);\n            }\n            startTs = startDate.getTime();\n\n            const endDate = new Date(endTs);\n            endDate.setMinutes(60);\n            endDate.setSeconds(0);\n            endDate.setMilliseconds(0);\n            endTs = endDate.getTime();\n            option.count = Math.round((endTs - startTs) / 3600000);\n        } else if (this.config.aggregateBar === 1440) {\n            // align start and stop to 1 day\n            const startDate = new Date(startTs);\n            startDate.setHours(0);\n            startDate.setMinutes(0);\n            startDate.setSeconds(0);\n            startDate.setMilliseconds(0);\n            if (this.config.postProcessing === 'diff') {\n                startDate.setDate(startDate.getDate() - 1);\n            }\n            startTs = startDate.getTime();\n\n            const endDate = new Date(endTs);\n            endDate.setDate(endDate.getDate() + 1);\n            endDate.setHours(0);\n            endDate.setMinutes(0);\n            endDate.setSeconds(0);\n            endDate.setMilliseconds(0);\n            endTs = endDate.getTime();\n            option.count = Math.round((endTs - startTs) / 86400000);\n        } else if (this.config.aggregateBar === 43200) {\n            // align start and stop to 1 month\n            const startDate = new Date(startTs);\n            startDate.setDate(1);\n            startDate.setHours(0);\n            startDate.setMinutes(0);\n            startDate.setSeconds(0);\n            startDate.setMilliseconds(0);\n            if (this.config.postProcessing === 'diff') {\n                startDate.setDate(startDate.getDate() - 30);\n            }\n            startTs = startDate.getTime();\n\n            const endDate = new Date(endTs);\n            endDate.setDate(1);\n            endDate.setHours(0);\n            endDate.setMinutes(0);\n            endDate.setMonth(endDate.getMonth() + 1);\n            endDate.setSeconds(0);\n            endDate.setMilliseconds(0);\n            endTs = endDate.getTime();\n            option.count = Math.round((endTs - startTs) / (86400000 * 30)); // todo it must be variable as every month has different count of days\n        }\n\n        option.start = startTs;\n        option.end = endTs;\n    }\n\n    getStartStop(index: number, step?: number): ioBroker.GetHistoryOptions {\n        let option: ioBroker.GetHistoryOptions;\n        let endTs: number;\n        let startTs: number;\n        let _nowTs: number;\n        this.config.l[index].offset = this.config.l[index].offset || 0;\n\n        // check config range\n        if (typeof this.config.range === 'string' && this.config.range.includes('m') && this.config.l.length > 1) {\n            const monthRange = parseInt(this.config.range as string, 10) || 1;\n            for (let a = 0; a < this.config.l.length; a++) {\n                if (this.config.l[a].offset) {\n                    // Check what the month has first index\n                    _nowTs = ChartModel.addTime(this.now, this.config.l[a].offset);\n                    const minusMonth = new Date(_nowTs);\n                    minusMonth.setMonth(minusMonth.getMonth() - monthRange);\n                    this.config.range = Math.floor((_nowTs - minusMonth.getTime()) / 60000);\n                    break;\n                }\n            }\n        } else if (typeof this.config.range === 'string' && this.config.range.includes('y') && this.config.l.length > 1) {\n            const yearRange = parseInt(this.config.range as string, 10) || 1;\n            for (let a = 0; a < this.config.l.length; a++) {\n                if (this.config.l[a].offset) {\n                    // Check what the month has first index\n                    _nowTs = ChartModel.addTime(this.now, this.config.l[a].offset);\n                    const minusYear = new Date(_nowTs);\n                    minusYear.setFullYear(minusYear.getFullYear() - yearRange);\n                    this.config.range = Math.floor((_nowTs - minusYear.getTime()) / 60000);\n                    break;\n                }\n            }\n        }\n\n        // todo: What about year?\n\n        if (!step) {\n            if (this.zoomData) {\n                startTs = this.zoomData.start;\n                endTs = this.zoomData.end;\n            } else if (this.config.timeType === 'static') {\n                let startTime: [number, number];\n                let endTime: [number, number];\n                if (this.config.start_time !== undefined) {\n                    startTime = this.config.start_time.split(':').map(Number) as [number, number];\n                } else {\n                    startTime = [0, 0];\n                }\n\n                if (this.config.end_time !== undefined) {\n                    endTime = this.config.end_time.split(':').map(Number) as [number, number];\n                } else {\n                    endTime = [24, 0];\n                }\n\n                // offset is in seconds\n                const startDate = new Date(this.config.start).setHours(startTime[0], startTime[1]);\n                const endDate = new Date(this.config.end).setHours(endTime[0], endTime[1]);\n\n                startTs = ChartModel.addTime(startDate, this.config.l[index].offset);\n                endTs = ChartModel.addTime(endDate, this.config.l[index].offset);\n            } else {\n                this.config.relativeEnd = this.config.relativeEnd || 'now';\n                let _nowDate: Date;\n\n                if (this.config.relativeEnd === 'now') {\n                    _nowDate = new Date(this.now);\n                } else if (this.config.relativeEnd.includes('minute')) {\n                    const minutes = parseInt(this.config.relativeEnd, 10) || 1;\n                    _nowDate = new Date(this.now);\n                    _nowDate.setMinutes(Math.floor(_nowDate.getMinutes() / minutes) * minutes + minutes);\n                    _nowDate.setSeconds(0);\n                    _nowDate.setMilliseconds(0);\n                } else if (this.config.relativeEnd.includes('hour')) {\n                    const hours = parseInt(this.config.relativeEnd, 10) || 1;\n                    _nowDate = new Date(this.now);\n                    _nowDate.setHours(Math.floor(_nowDate.getHours() / hours) * hours + hours);\n                    _nowDate.setMinutes(0);\n                    _nowDate.setSeconds(0);\n                    _nowDate.setMilliseconds(0);\n                } else if (this.config.relativeEnd === 'today') {\n                    _nowDate = new Date(this.now);\n                    _nowDate.setDate(_nowDate.getDate() + 1);\n                    _nowDate.setHours(0);\n                    _nowDate.setMinutes(0);\n                    _nowDate.setSeconds(0);\n                    _nowDate.setMilliseconds(0);\n                } else if (this.config.relativeEnd === 'weekUsa') {\n                    // const week = parseInt(config.relativeEnd, 10) || 1;\n                    _nowDate = new Date(this.now);\n                    _nowDate.setDate(_nowDate.getDate() - _nowDate.getDay() + 7);\n                    _nowDate.setHours(0);\n                    _nowDate.setMinutes(0);\n                    _nowDate.setSeconds(0);\n                    _nowDate.setMilliseconds(0);\n                } else if (this.config.relativeEnd === 'weekEurope') {\n                    // const _week = parseInt(config.relativeEnd, 10) || 1;\n                    _nowDate = new Date(this.now);\n                    // If\n                    if (_nowDate.getDay() === 0) {\n                        _nowDate.setDate(_nowDate.getDate() + 1);\n                    } else {\n                        _nowDate.setDate(_nowDate.getDate() - _nowDate.getDay() + 8);\n                    }\n                    _nowDate.setHours(0);\n                    _nowDate.setMinutes(0);\n                    _nowDate.setSeconds(0);\n                    _nowDate.setMilliseconds(0);\n                } else if (this.config.relativeEnd === 'week2Usa') {\n                    // const week = parseInt(config.relativeEnd, 10) || 1;\n                    _nowDate = new Date(this.now);\n                    _nowDate.setDate(_nowDate.getDate() - _nowDate.getDay() + 7);\n                    _nowDate.setDate(_nowDate.getDate() - 7);\n                    _nowDate.setHours(0);\n                    _nowDate.setMinutes(0);\n                    _nowDate.setSeconds(0);\n                    _nowDate.setMilliseconds(0);\n                } else if (this.config.relativeEnd === 'week2Europe') {\n                    // const _week = parseInt(config.relativeEnd, 10) || 1;\n                    _nowDate = new Date(this.now);\n                    // If\n                    if (_nowDate.getDay() === 0) {\n                        _nowDate.setDate(_nowDate.getDate() + 1);\n                    } else {\n                        _nowDate.setDate(_nowDate.getDate() - _nowDate.getDay() + 8);\n                    }\n                    _nowDate.setDate(_nowDate.getDate() - 7);\n                    _nowDate.setHours(0);\n                    _nowDate.setMinutes(0);\n                    _nowDate.setSeconds(0);\n                    _nowDate.setMilliseconds(0);\n                } else if (this.config.relativeEnd === 'month') {\n                    _nowDate = new Date(this.now);\n                    _nowDate.setMonth(_nowDate.getMonth() + 1);\n                    _nowDate.setDate(1);\n                    _nowDate.setHours(0);\n                    _nowDate.setMinutes(0);\n                    _nowDate.setSeconds(0);\n                    _nowDate.setMilliseconds(0);\n                } else if (this.config.relativeEnd === 'year') {\n                    _nowDate = new Date(this.now);\n                    _nowDate.setFullYear(_nowDate.getFullYear() + 1);\n                    _nowDate.setMonth(0);\n                    _nowDate.setDate(1);\n                    _nowDate.setHours(0);\n                    _nowDate.setMinutes(0);\n                    _nowDate.setSeconds(0);\n                    _nowDate.setMilliseconds(0);\n                }\n\n                this.config.range = this.config.range || 30;\n\n                endTs = ChartModel.addTime(_nowDate, this.config.l[index].offset);\n                startTs = ChartModel.addTime(endTs, this.config.range, true);\n            }\n\n            const aggregate = this.config.l[index].aggregate || this.config.aggregate;\n            if (aggregate === 'current') {\n                throw new Error('Cannot use \"current\" aggregate for start/stop');\n            }\n\n            option = {\n                start: startTs,\n                end: endTs,\n                ignoreNull:\n                    this.config.l[index].ignoreNull === undefined\n                        ? this.config.ignoreNull\n                        : this.config.l[index].ignoreNull,\n                aggregate: aggregate || 'minmax',\n                from: false,\n                ack: false,\n                q: false,\n                addID: false,\n            } as ioBroker.GetHistoryOptions;\n\n            if (this.config.l[index].chartType === 'bar' || this.config.l[index].chartType === 'polar') {\n                this.increaseRegionForBar(startTs, endTs, option);\n            } else if (this.config.aggregateType === 'step') {\n                option.step = this.config.aggregateSpan * 1000;\n            } else if (this.config.aggregateType === 'count') {\n                option.count = this.config.aggregateSpan || 300;\n            }\n\n            this.config.start = startTs;\n            this.config.end = endTs;\n\n            return option;\n        }\n        if (this.zoomData) {\n            startTs = this.zoomData.start;\n            endTs = this.zoomData.end;\n        } else {\n            endTs = ChartModel.addTime(this.now, this.config.l[index].offset);\n            startTs = endTs - step;\n        }\n\n        option = {\n            start: startTs,\n            end: endTs,\n            ignoreNull:\n                this.config.l[index].ignoreNull === undefined\n                    ? this.config.ignoreNull\n                    : this.config.l[index].ignoreNull,\n            aggregate:\n                (this.config.l[index].aggregate as ioBroker.GetHistoryOptions['aggregate']) ||\n                (this.config.aggregate as ioBroker.GetHistoryOptions['aggregate']) ||\n                'minmax',\n            count: 1,\n            from: false,\n            ack: false,\n            q: false,\n            addId: false,\n        };\n\n        this.config.start = ChartModel.addTime(endTs, this.config.range, true);\n        this.config.end = endTs;\n\n        return option;\n    }\n\n    static postProcessing(\n        series: BarSeries[],\n        categories: number[],\n        aggregate: ChartAggregateType,\n        postProcessingMethod?: 'diff' | '',\n    ): BarSeries {\n        const barSeries: BarSeries = [];\n\n        for (let i = 0; i < series.length; i++) {\n            const interval = series[i];\n            if (!interval.length) {\n                barSeries[i] = null;\n            } else if (interval.length === 1) {\n                // sum all values\n                barSeries[i] = interval[0];\n            } else if (aggregate === 'average') {\n                const sum = interval.reduce((a, b) => a + b, 0);\n                barSeries[i] = sum / interval.length;\n            } else if (aggregate === 'min') {\n                let min = interval[0];\n                for (let j = 1; j < interval.length; j++) {\n                    if (interval[j] < min) {\n                        min = interval[j];\n                    }\n                }\n                barSeries[i] = min;\n            } else if (aggregate === 'max') {\n                let max = interval[0];\n                for (let j = 1; j < interval.length; j++) {\n                    if (interval[j] > max) {\n                        max = interval[j];\n                    }\n                }\n                barSeries[i] = max;\n            } else if (aggregate === 'total') {\n                barSeries[i] = interval.reduce((a, b) => a + b, 0);\n            } else {\n                barSeries[i] = interval[interval.length - 1];\n            }\n        }\n\n        if (postProcessingMethod === 'diff') {\n            for (let i = series.length - 1; i > 0; i--) {\n                if (barSeries[i - 1] !== null && barSeries[i] !== null) {\n                    barSeries[i] -= barSeries[i - 1];\n                } else {\n                    barSeries[i] = 0;\n                }\n            }\n            barSeries.splice(0, 1);\n            categories.splice(0, 1);\n        }\n\n        for (let i = 0; i < series.length; i++) {\n            console.log(`${categories[i]}: ${barSeries[i]}`);\n        }\n        return barSeries;\n    }\n\n    static processOneValue(\n        value: ioBroker.StateValue | undefined,\n        convertFunc: ((val: number) => number) | undefined,\n        yOffset: number,\n    ): number | null {\n        // Convert boolean values to numbers\n        if (value === 'true' || value === true) {\n            value = 1;\n        } else if (value === 'false' || value === false) {\n            value = 0;\n        } else if (typeof value === 'string') {\n            value = parseFloat(value as unknown as string);\n        }\n\n        if (convertFunc) {\n            return value !== null ? convertFunc(value + yOffset) : null;\n        }\n\n        return value !== null ? value + yOffset : null;\n    }\n\n    processRawData(\n        _id: string,\n        line: ChartLineConfig,\n        values: SeriesData[],\n        option?: ioBroker.GetHistoryOptions,\n    ): { seriesData?: LineSeries; barData?: BarSeries } {\n        if (!option) {\n            option = {\n                start: values[0].ts,\n                end: values[values.length - 1].ts,\n            };\n\n            if (line.chartType === 'bar' || line.chartType === 'polar') {\n                this.increaseRegionForBar(option.start, option.end, option);\n            }\n        }\n\n        const yOffset: number = line.yOffset || 0;\n\n        const seriesData: LineSeries = [];\n        // Collects for every time interval the values. Later it will be combined to number[]\n        const _barSeries: number[][] = [];\n        let barCategories = this.barCategories;\n\n        // fill categories for bars\n        if (line.chartType === 'bar') {\n            if (!barCategories) {\n                barCategories = [];\n                this.barCategories = barCategories;\n                const start = new Date(option.start);\n                const end: number = typeof option.end === 'number' ? option.end : (option.end as Date).getTime();\n                while (start.getTime() <= end) {\n                    barCategories.push(start.getTime());\n                    start.setMinutes(start.getMinutes() + this.config.aggregateBar);\n                }\n            }\n\n            barCategories.forEach(() => _barSeries.push([]));\n        }\n\n        let convertFunc: ((val: number) => number) | undefined;\n        if (line.convert?.trim()) {\n            if (!this.convertFunctions[line.convert.trim()]) {\n                let convert = line.convert.trim();\n                if (!convert.includes('return')) {\n                    convert = `return ${convert}`;\n                }\n                try {\n                    convertFunc = new Function('val', convert) as (val: number) => number;\n                } catch (e) {\n                    console.error(`[ChartModel] Cannot parse convert function: ${e}`);\n                }\n            }\n            convertFunc = this.convertFunctions[line.convert.trim()];\n        }\n\n        for (let i = 0; i < values.length; i++) {\n            const value: number | null = ChartModel.processOneValue(values[i].val, convertFunc, yOffset);\n\n            if (line.chartType === 'bar') {\n                // find category\n                for (let c = 0; c < barCategories.length; c++) {\n                    if (\n                        barCategories[c] >= values[i].ts &&\n                        values[i].ts < barCategories[c] + this.config.aggregateBar * 60000\n                    ) {\n                        _barSeries[c].push(value);\n                        break;\n                    }\n                }\n            } else if (line.chartType !== 'polar') {\n                if (line.noFuture && values[i].ts > this.now) {\n                    // todo: interpolate value\n                    break;\n                }\n\n                const dp: EchartsOneValue = { value: [values[i].ts, value] };\n\n                // If value was interpolated by backend\n                if (values[i].i) {\n                    dp.exact = false;\n                }\n                seriesData.push(dp);\n            }\n        }\n\n        // add start and end\n        if (line.chartType !== 'bar' && line.chartType !== 'polar') {\n            let end: number = typeof option.end === 'number' ? option.end : (option.end as Date).getTime();\n            const start: number = typeof option.start === 'number' ? option.start : (option.start as Date).getTime();\n            // End cannot be in the future\n            if (end > this.now) {\n                end = this.now;\n            }\n            if (seriesData.length) {\n                if (seriesData[0].value[0] > start) {\n                    seriesData.unshift({ value: [start, null], exact: false });\n                }\n                const last = seriesData[seriesData.length - 1];\n                if (last.value[0] < end) {\n                    if (line.validTime) {\n                        // If the last value is not older than X seconds, assume it is still the same\n                        if (end - line.validTime * 1000 <= last.value[0]) {\n                            seriesData.push({ value: [end, last.value[1]], exact: false });\n                        } else {\n                            seriesData.push({ value: [end, null], exact: false });\n                        }\n                    } else {\n                        seriesData.push({ value: [end, null], exact: false });\n                    }\n                }\n            } else {\n                seriesData.push({ value: [start, null], exact: false });\n                seriesData.push({ value: [end, null], exact: false });\n            }\n\n            // TODO: May be not required?\n            seriesData.sort((a, b) => (a.value[0] > b.value[0] ? 1 : a.value[0] < b.value[0] ? -1 : 0));\n\n            // The next line is not required, as it is already done at the start\n            return { seriesData };\n        }\n\n        // it is not the series, it is bar data\n        const barData = ChartModel.postProcessing(_barSeries, barCategories, line.aggregate, line.postProcessing);\n        return { barData };\n    }\n\n    async readOneChart(id: string, instance: string, index: number): Promise<void> {\n        const lineConfig = this.config.l[index];\n        if (instance === 'json') {\n            const state = await this.socket.getState(id);\n            try {\n                const valuesAny: SeriesData[] | { history: SeriesData[] } = JSON.parse(state?.val as string);\n                let values: SeriesData[];\n                if ((valuesAny as { history: SeriesData[] }).history) {\n                    values = (valuesAny as { history: SeriesData[] }).history;\n                } else {\n                    values = valuesAny as SeriesData[];\n                }\n                if (!Array.isArray(values)) {\n                    values = [];\n                    console.warn('JSON is not an array');\n                }\n\n                values = values.filter(v => v);\n\n                // convert alternative names to {ts, val}. Possible names for ts: t, time. Possible names for val: y, value\n                if (values[0]) {\n                    const keys = Object.keys(values[0]);\n                    if (!keys.includes('val') || !keys.includes('ts')) {\n                        // If a format is [{t: 123, y: 1}, {t: 124, y: 2}] (e.g. from pvsolar\n                        if (keys.includes('y') && keys.includes('t')) {\n                            values = values.map(v => ({ ts: v.t, val: v.y }) as SeriesData);\n                        } else {\n                            if (keys.includes('y')) {\n                                values.forEach(v => (v.val = v.y));\n                            } else if (keys.includes('value')) {\n                                values.forEach(v => (v.val = v.value));\n                            } else if (keys.includes('data')) {\n                                values.forEach(v => (v.val = v.data));\n                            } else if (keys.includes('v')) {\n                                values.forEach(v => (v.val = v.v));\n                            }\n\n                            if (keys.includes('t')) {\n                                values.forEach(v => (v.ts = v.t));\n                            } else if (keys.includes('time')) {\n                                values.forEach(v => (v.ts = v.time));\n                            } else if (keys.includes('date')) {\n                                values.forEach(v => (v.ts = v.date));\n                            }\n                        }\n                    }\n\n                    // convert ts to number\n                    if (values[0].ts) {\n                        if (typeof values[0].ts === 'string' && window.isFinite(values[0].ts)) {\n                            values.forEach(v => (v.ts = parseInt(v.ts as unknown as string, 10)));\n                        } else if (\n                            typeof values[0].ts === 'string' &&\n                            new Date(values[0].ts).toString() !== 'Invalid Date'\n                        ) {\n                            values.forEach(v => (v.ts = new Date(v.ts).getTime()));\n                        }\n                        // no else\n                        if (typeof values[0].ts === 'number' && values[0].ts < 946681200000) {\n                            // new Date(2000,0,1).getTime() === 946681200000\n                            values.forEach(v => (v.ts *= 1000));\n                        }\n                    }\n                }\n\n                values.sort((a, b) => (a.ts - b.ts ? -1 : a.ts < b.ts ? 1 : 0));\n\n                const result = this.processRawData(id, lineConfig, values);\n                if (result.barData) {\n                    this.barData[index] = result.barData;\n                } else {\n                    this.seriesData[index] = result.seriesData;\n                }\n            } catch (e) {\n                console.error(`[ChartModel] Cannot parse values in JSON: ${e}`);\n            }\n\n            if (!this.serverSide && !this.subscribes.includes(id)) {\n                this.subscribes.push(id);\n                this.subscribed = true;\n                void this.socket.subscribeState(id, this.onStateChange);\n            }\n        } else {\n            const option = this.getStartStop(index);\n            option.instance = instance;\n            option.sessionId = this.sessionId;\n\n            // console.log(JSON.stringify(option));\n            if (this.debug) {\n                console.log(`[ChartModel] ${new Date(option.start).toString()} - ${new Date(option.end).toString()}`);\n            }\n\n            if (lineConfig.aggregate !== 'current') {\n                try {\n                    const res = await this.socket.getHistoryEx(id, option);\n                    if (this.sessionId && res.sessionId && res.sessionId !== this.sessionId) {\n                        console.warn(\n                            `[ChartModel] Ignore request with sessionId=${res.sessionId}, actual is ${this.sessionId}`,\n                        );\n                        return;\n                    }\n\n                    if (res?.values) {\n                        // option.ignoreNull = (config.l[index].ignoreNull === undefined) ? (config.ignoreNull === 'true' || config.ignoreNull === true) : (config.l[index].ignoreNull === 'true' || config.l[index].ignoreNull === true);\n                        const result = this.processRawData(id, lineConfig, res.values as SeriesData[], option);\n\n                        if (result.barData) {\n                            this.barData[index] = result.barData;\n                        } else {\n                            this.seriesData[index] = result.seriesData;\n                        }\n                        // free memory\n                        res.values = null;\n                    }\n                } catch (err) {\n                    if (err === NOT_CONNECTED && this.onErrorFunc) {\n                        this.onErrorFunc(err);\n                    }\n                    console.error(`[ChartModel] ${err}`);\n                }\n            }\n\n            if (\n                (this.config.legActual && lineConfig.chartType !== 'bar' && lineConfig.chartType !== 'polar') ||\n                lineConfig.aggregate === 'current'\n            ) {\n                // read current value\n                try {\n                    const state = await this.socket.getState(id);\n                    this.actualValues[index] = ChartModel.processOneValue(\n                        state.val,\n                        this.convertFunctions[lineConfig.convert],\n                        lineConfig.yOffset || 0,\n                    );\n                } catch (e) {\n                    console.warn(`Cannot read last value of \"${id}\": ${e}`);\n                    this.actualValues[index] = null;\n                }\n\n                if (!this.serverSide && !this.subscribes.includes(id)) {\n                    this.subscribes.push(id);\n                    this.subscribed = true;\n                    void this.socket.subscribeState(id, this.onStateChange);\n                }\n            }\n        }\n    }\n\n    async readOneRawChart(id: string, instance: string, start: number, end: number): Promise<SeriesData[] | null> {\n        if (instance === 'json') {\n            const state: ioBroker.State | null | undefined = await this.socket.getState(id);\n            try {\n                const valuesJson: SeriesData[] | { history: SeriesData[] } = JSON.parse(state?.val as string);\n                let values: SeriesData[];\n                if ((valuesJson as { history: SeriesData[] }).history) {\n                    values = (valuesJson as { history: SeriesData[] }).history;\n                } else {\n                    values = valuesJson as SeriesData[];\n                }\n\n                // convert alternative names to {ts, val}. Possible names for ts: t, time. Possible names for val: y, value\n                if (values[0]) {\n                    const keys = Object.keys(values[0]);\n                    if (!keys.includes('val') || !keys.includes('ts')) {\n                        // If format is [{t: 123, y: 1}, {t: 124, y: 2}] (e.g. from pvsolar\n                        if (keys.includes('y') && keys.includes('t')) {\n                            values = values.map(v => ({ ts: v.t, val: v.y }) as SeriesData);\n                        } else {\n                            if (keys.includes('y')) {\n                                values.forEach(v => (v.val = v.y));\n                            } else if (keys.includes('value')) {\n                                values.forEach(v => (v.val = v.value));\n                            } else if (keys.includes('data')) {\n                                values.forEach(v => (v.val = v.data));\n                            } else if (keys.includes('v')) {\n                                values.forEach(v => (v.val = v.v));\n                            }\n\n                            if (keys.includes('t')) {\n                                values.forEach(v => (v.ts = v.t));\n                            } else if (keys.includes('time')) {\n                                values.forEach(v => (v.ts = v.time));\n                            } else if (keys.includes('date')) {\n                                values.forEach(v => (v.ts = v.date));\n                            }\n                        }\n                    }\n\n                    // convert ts to number\n                    if (values[0].ts) {\n                        if (typeof values[0].ts === 'string' && window.isFinite(values[0].ts)) {\n                            values.forEach(v => (v.ts = parseInt(v.ts as unknown as string, 10)));\n                        } else if (\n                            typeof values[0].ts === 'string' &&\n                            new Date(values[0].ts).toString() !== 'Invalid Date'\n                        ) {\n                            values.forEach(v => (v.ts = new Date(v.ts).getTime()));\n                        }\n                        // no else\n                        if (typeof values[0].ts === 'number' && values[0].ts < 946681200000) {\n                            // new Date(2000,0,1).getTime() === 946681200000\n                            values.forEach(v => (v.ts *= 1000));\n                        }\n                    }\n                }\n\n                if (!Array.isArray(values)) {\n                    values = [];\n                    console.warn('JSON is not an array');\n                }\n                values.sort((a, b) => (a.ts - b.ts ? -1 : a.ts < b.ts ? 1 : 0));\n\n                return values;\n            } catch (e) {\n                console.error(`[ChartModel] Cannot parse values in JSON: ${e}`);\n            }\n        } else {\n            const option: ioBroker.GetHistoryOptions = {\n                start,\n                end,\n                ignoreNull: false,\n                aggregate: 'none',\n                count: 2000,\n                from: false,\n                ack: false,\n                q: false,\n                addId: false,\n            };\n\n            option.instance = instance;\n            option.sessionId = this.sessionId;\n\n            if (this.debug) {\n                console.log(`[ChartModel] ${new Date(option.start).toString()} - ${new Date(option.end).toString()}`);\n            }\n\n            try {\n                const res = await this.socket.getHistoryEx(id, option);\n                if (this.sessionId && res.sessionId && res.sessionId !== this.sessionId) {\n                    console.warn(\n                        `[ChartModel] Ignore request with sessionId=${res.sessionId}, actual is ${this.sessionId}`,\n                    );\n                    return null;\n                }\n\n                return res?.values;\n            } catch (err) {\n                err === NOT_CONNECTED && this.onErrorFunc && this.onErrorFunc(err);\n                err && console.error(`[ChartModel] ${err}`);\n            }\n        }\n\n        return null;\n    }\n\n    _readObject(id: string): Promise<ioBroker.Object | null> {\n        if (!(this.objectPromises[id] instanceof Promise)) {\n            this.objectPromises[id] = (this.socket.getObject(id) as Promise<ioBroker.ChartObject>).catch(\n                (e: unknown): null => {\n                    if ((e as Error).toString().includes(NOT_CONNECTED) && this.onErrorFunc) {\n                        this.onErrorFunc(e as Error);\n                    }\n                    console.error(`Cannot read \"${id}\": ${(e as Error).toString()}`);\n                    return null;\n                },\n            );\n        }\n\n        return this.objectPromises[id];\n    }\n\n    async _readOneLine(index: number): Promise<void> {\n        const lineConfig = this.config.l[index];\n        try {\n            const obj = await this._readObject(lineConfig.id);\n\n            if (obj?.common) {\n                const name: ioBroker.StringOrTranslated = lineConfig.name || obj.common.name;\n\n                lineConfig.name =\n                    name && typeof name === 'object'\n                        ? name[this.systemConfig.language] || name.en || lineConfig.id\n                        : (name as string) || '';\n\n                lineConfig.unit = lineConfig.unit || (obj.common.unit ? obj.common.unit.replace('�', '°') : '');\n\n                lineConfig.type = obj.common.type;\n\n                if (lineConfig.chartType === 'auto') {\n                    lineConfig.chartType = obj.common.type === 'boolean' ? 'steps' : 'line';\n                    lineConfig.aggregate = obj.common.type === 'boolean' ? 'none' : 'minmax';\n                }\n\n                // ignore unit if true/false text set\n                if (lineConfig.unit && (lineConfig.falseText || lineConfig.trueText)) {\n                    delete lineConfig.unit;\n                }\n\n                // remember enum states\n                if (\n                    obj.common.states &&\n                    !Array.isArray(obj.common.states) &&\n                    lineConfig.states !== false &&\n                    !obj.common.unit\n                ) {\n                    if (lineConfig.states) {\n                        lineConfig.states = Object.assign(obj.common.states, lineConfig.states);\n                    } else {\n                        lineConfig.states = obj.common.states;\n                    }\n\n                    // if the states have true, false as text => convert it to 1, 0\n                    if (Object.keys(lineConfig.states).find(key => key === 'true' || key === 'false')) {\n                        const states: Record<string, string> = {};\n                        Object.keys(lineConfig.states).forEach(key => {\n                            states[key === 'true' ? 1 : key === 'false' ? 0 : key] = (\n                                lineConfig.states as Record<string, string>\n                            )[key];\n                        });\n                        lineConfig.states = states;\n                    }\n\n                    // ignore unit for enums text set\n                    if (lineConfig.unit && lineConfig.states) {\n                        delete lineConfig.unit;\n                    }\n                }\n\n                // set YAxis to 'off' if commonYAxis is set\n                if (lineConfig.commonYAxis || lineConfig.commonYAxis === 0) {\n                    lineConfig.yaxe = 'off';\n                }\n            }\n        } catch (e) {\n            e === NOT_CONNECTED && this.onErrorFunc && this.onErrorFunc(e);\n            console.error(`[ChartModel] Cannot read object ${lineConfig.id}: ${e}`);\n        }\n\n        lineConfig.name = lineConfig.name || lineConfig.id || '';\n        lineConfig.unit = lineConfig.unit || '';\n        if (lineConfig.chartType === 'auto') {\n            lineConfig.chartType = 'line';\n            lineConfig.aggregate = 'minmax';\n        }\n\n        await this.readOneChart(lineConfig.id, lineConfig.instance || this.defaultHistory, index);\n    }\n\n    async _readData(): Promise<void> {\n        for (let j = 0; j < this.config.l.length; j++) {\n            if (this.config.l[j]) {\n                this.seriesData.push([]);\n            }\n            if (this.config.l[j]?.id) {\n                await this._readOneLine(j);\n            }\n        }\n    }\n\n    async readTicks(): Promise<void> {\n        if (this.config.ticks) {\n            const index = 0;\n            const option: ioBroker.GetHistoryOptions = JSON.parse(JSON.stringify(this.getStartStop(index)));\n            option.instance = this.config.l[index].instance || this.defaultHistory;\n            option.sessionId = this.sessionId;\n            option.aggregate = 'none';\n\n            if (this.debug) {\n                console.log(\n                    `[ChartModel] Ticks: ${new Date(option.start).toString()} - ${new Date(option.end).toString()}`,\n                );\n            }\n\n            try {\n                const res = await this.socket.getHistoryEx(this.config.ticks, option);\n                if (this.sessionId && res.sessionId && res.sessionId !== this.sessionId) {\n                    console.warn(\n                        `[ChartModel] Ignore request with sessionId=${res.sessionId}, actual is ${this.sessionId}`,\n                    );\n                    return;\n                }\n\n                const _series: EchartsAnyValue[] = this.ticks || [];\n                if (res?.values) {\n                    if (this.ticks?.length) {\n                        this.ticks.splice(0, this.ticks.length);\n                    }\n\n                    const values = res.values;\n\n                    for (let i = 0; i < values.length; i++) {\n                        if (values[i].val !== null) {\n                            _series.push({ value: [values[i].ts, values[i].val] });\n                        }\n                    }\n\n                    // add start and end\n                    if (_series.length) {\n                        if (_series[0].value[0] > option.start) {\n                            _series.unshift({ value: [option.start, ''] });\n                        }\n                        if (_series[_series.length - 1].value[0] < option.end) {\n                            _series.push({ value: [option.end, ''] });\n                        }\n                    } else {\n                        _series.push({ value: [option.start, ''] });\n                        _series.push({ value: [option.end, ''] });\n                    }\n                    // free memory\n                    res.values = null;\n                }\n\n                this.ticks = _series;\n            } catch (e) {\n                e === NOT_CONNECTED && this.onErrorFunc && this.onErrorFunc(e);\n                console.error(`[ChartModel] ${e}`);\n            }\n        }\n    }\n\n    /*\n    readValue(id, index, cb) {\n        this.socket.getState(id)\n            .then(state => {\n                if (state) {\n                    cb(index, parseFloat(state.val) || 0);\n                } else {\n                    cb(index, 0);\n                }\n            })\n            .catch(e => {\n                e === NOT_CONNECTED && this.onErrorFunc && this.onErrorFunc(e);\n                console.error(`[ChartModel] ${e}`);\n                cb(index, 0);\n            });\n    }\n    */\n\n    async readMarkings(): Promise<void> {\n        if (!this.config.marks) {\n            return;\n        }\n        // read markings\n        for (let m = 0; m < this.config.marks.length; m++) {\n            const mark = this.config.marks[m];\n            // process upper ID\n            if (\n                mark.upperValueOrId &&\n                typeof mark.upperValueOrId === 'string' &&\n                mark.upperValueOrId.toString().includes('.') &&\n                parseFloat(mark.upperValueOrId).toString() !== mark.upperValueOrId.toString().replace(/\\.0*$/, '')\n            ) {\n                /* if (!this.subscribes.includes(mark.upperValueOrId)) {\n                        this.subscribes.push(mark.upperValueOrId);\n                    } */\n                try {\n                    const state = await this.socket.getState(mark.upperValueOrId);\n                    if (state && state.val !== undefined && state.val !== null) {\n                        mark.upperValue = parseFloat(state.val as string) || 0;\n                    } else {\n                        mark.upperValue = null;\n                    }\n                } catch (e) {\n                    e === NOT_CONNECTED && this.onErrorFunc && this.onErrorFunc(e);\n                    console.error(`Cannot read marking ${mark.upperValueOrId}: ${e}`);\n                }\n            }\n\n            // process lower ID\n            if (\n                mark.lowerValueOrId &&\n                typeof mark.lowerValueOrId === 'string' &&\n                mark.lowerValueOrId.includes('.') &&\n                parseFloat(mark.lowerValueOrId).toString() !== mark.lowerValueOrId.replace(/\\.0*$/, '')\n            ) {\n                /* if (!this.subscribes.includes(mark.upperValueOrId)) {\n                        this.subscribes.push(mark.upperValueOrId);\n                    } */\n                try {\n                    const state = await this.socket.getState(mark.lowerValueOrId);\n                    if (state && state.val !== undefined && state.val !== null) {\n                        mark.lowerValue = parseFloat(state.val as string) || 0;\n                    } else {\n                        mark.lowerValue = null;\n                    }\n                } catch (e) {\n                    e === NOT_CONNECTED && this.onErrorFunc && this.onErrorFunc(e);\n                    console.error(`Cannot read marking ${mark.lowerValueOrId}: ${e}`);\n                }\n            }\n        }\n    }\n\n    async subscribeAll(subscribes?: string[]): Promise<void> {\n        if (!this.serverSide && subscribes?.length) {\n            for (let s = 0; s < subscribes.length; s++) {\n                try {\n                    await this.socket.subscribeState(subscribes[s], this.onStateChange);\n                } catch (e) {\n                    e === NOT_CONNECTED && this.onErrorFunc && this.onErrorFunc(e);\n                    console.error(`Cannot subscribe ${subscribes[s]}: ${e}`);\n                }\n            }\n        }\n    }\n\n    updateData(): void {\n        // combine seriesData and barData\n        const updateData: BarAndLineSeries[] = [];\n        this.config.l.forEach((line, index) => {\n            if (line.chartType === 'bar') {\n                updateData[index] = this.barData[index];\n            } else {\n                updateData[index] = this.seriesData[index];\n            }\n        });\n\n        this.onUpdateFunc(updateData, this.actualValues, this.barCategories);\n    }\n\n    onStateChange = (id: string, state: ioBroker.State | null | undefined): void => {\n        if (!id || !state || this.reading) {\n            return;\n        }\n\n        if (this.debug) {\n            console.log(`State update ${id} - ${state.val}`);\n        }\n\n        let changed = false;\n        for (let index = 0; index < this.config.l.length; index++) {\n            if (this.config.l[index].id === id) {\n                // by update from json => update always all values\n                if (this.config.l[index].instance === 'json') {\n                    try {\n                        const dataJson: SeriesData[] | { history: SeriesData[] } = JSON.parse(state?.val as string);\n                        let data: SeriesData[];\n                        if ((dataJson as { history: SeriesData[] }).history) {\n                            data = (dataJson as { history: SeriesData[] }).history;\n                        } else {\n                            data = dataJson as SeriesData[];\n                        }\n\n                        if (!Array.isArray(data)) {\n                            data = [];\n                            console.warn('JSON is not an array');\n                        }\n                        data.sort((a, b) => (a.ts - b.ts ? -1 : a.ts < b.ts ? 1 : 0));\n                        const result = this.processRawData(id, this.config.l[index], data);\n\n                        if (result.barData) {\n                            this.barData[index] = result.barData;\n                        } else {\n                            this.seriesData[index] = result.seriesData;\n                        }\n\n                        // take last value as actual value\n                        if (this.actualValues) {\n                            this.actualValues[index] = data[data.length - 1].val;\n                        }\n\n                        this.updateData();\n                    } catch (e) {\n                        console.error(`Cannot parse JSON: ${e}`);\n                    }\n\n                    return;\n                }\n\n                const value = ChartModel.processOneValue(\n                    state.val,\n                    this.convertFunctions[this.config.l[index].convert],\n                    this.config.l[index].yOffset || 0,\n                );\n\n                if (this.actualValues && this.actualValues[index] !== value) {\n                    this.actualValues[index] = value;\n                    changed = true;\n                }\n                break;\n            }\n        }\n        changed && this.onUpdateFunc(null, this.actualValues);\n    };\n\n    static addTime(\n        time: number | Date,\n        offset: string | number,\n        isOffsetInMinutes?: boolean,\n    ): number {\n        const date: Date = new Date(time);\n\n        if (typeof offset === 'string') {\n            if (offset[1] === 'm' || offset[2] === 'm') {\n                offset = parseInt(offset, 10);\n                date.setMonth(date.getMonth() - offset);\n                time = date.getTime();\n            } else if (offset[1] === 'y' || offset[2] === 'y') {\n                offset = parseInt(offset, 10);\n                date.setFullYear(date.getFullYear() - offset);\n                time = date.getTime();\n            } else {\n                time = date.getTime();\n                if (isOffsetInMinutes) {\n                    time -= (parseInt(offset, 10) || 0) * 60000;\n                }else {\n                    time -= (parseInt(offset, 10) || 0) * 1000;\n                }\n            }\n        } else {\n            offset = offset || 0;\n            time = date.getTime();\n            if (isOffsetInMinutes) {\n                time -= offset * 60000;\n            } else {\n                time -= offset * 1000;\n            }\n        }\n        return time;\n    }\n\n    async exportData(from: number, to: number, excludes?: string[]): Promise<{ [objectId: string]: SeriesData[] }> {\n        // read all raw data\n        const result: { [objectId: string]: SeriesData[] } = {};\n        for (let i = 0; i < this.config.l.length; i++) {\n            if (excludes?.includes(this.config.l[i].id) || !this.config.l[i] || !this.config.l[i].id) {\n                continue;\n            }\n            let data = await this.readOneRawChart(\n                this.config.l[i].id,\n                this.config.l[i].instance || this.defaultHistory,\n                from,\n                to,\n            );\n            let _from = data?.length ? data[data.length - 1].ts + 1 : 0;\n            let values = data;\n            while (values?.length === 2000) {\n                values = await this.readOneRawChart(\n                    this.config.l[i].id,\n                    this.config.l[i].instance || this.defaultHistory,\n                    _from,\n                    to,\n                );\n                _from = values && values.length ? values[values.length - 1].ts + 1 : 0;\n                data = data.concat(values);\n            }\n            if (values) {\n                result[this.config.l[i].id] = values;\n            }\n        }\n\n        return result;\n    }\n\n    async readData(): Promise<void> {\n        if (this.readOnZoomTimeout) {\n            clearTimeout(this.readOnZoomTimeout);\n            this.readOnZoomTimeout = null;\n        }\n\n        this.now = Date.now();\n        console.log(`Read till ${new Date(this.now).toString()}`);\n        this.sessionId = this.sessionId || 0;\n        this.sessionId++;\n        if (this.sessionId > 0xffffff) {\n            this.sessionId = 1;\n        }\n\n        if (this.config.l) {\n            this.reading = true;\n            this.onReadingFunc && this.onReadingFunc(true);\n\n            // todo\n            //            if (config.renderer === 'pie' || (config.renderer === 'bar' && config._ids.length > 1)) {\n            //\n            //                seriesData = [[]];\n            //                for (const j = 0; j < config._ids.length; j++) {\n            //                    readOneValue(config._ids[j], j, function (_id, _index, value) {\n            //                        if (config.renderer === 'pie') {\n            //                            seriesData[0][_index] = {label: config.l[_index].name, data: value};\n            //                        } else {\n            //                            seriesData[0][_index] = [config.l[_index].name, value];\n            //                        }\n            //                        if (_index === config._ids.length - 1) {\n            //                            graphCreate(divId, );\n            //                        }\n            //                    });\n            //                }\n            //            } else {\n            this.seriesData = [];\n            this.barData = [];\n            this.barCategories = null;\n\n            await this._readData();\n            // use units from common axis\n            for (let i = 0; i < this.config.l.length; i++) {\n                if (this.config.l[i].commonYAxis || this.config.l[i].commonYAxis === 0) {\n                    this.config.l[i].unit = this.config.l[this.config.l[i].commonYAxis].unit;\n                }\n            }\n\n            await this.readTicks();\n            await this.readMarkings();\n            /* if (!this.subscribed) {\n                this.subscribed = true;\n                await this.subscribeAll(this.subscribes));\n            } */\n            this.reading = false;\n\n            this.updateData();\n        } else {\n            this.onErrorFunc && this.onErrorFunc(new Error('No config provided'));\n            this.onReadingFunc && this.onReadingFunc(false);\n            this.reading = false;\n        }\n    }\n}\n\nexport default ChartModel;\n"]}